


有哪些适合新手练手的Python项目
https://zhuanlan.zhihu.com/p/22164270

https://www.zhihu.com/question/29372574/answer/88624507


http://study.163.com/course/courseMain.htm?courseId=378003

chapter  1 

==1 我和Python的第一次亲密接触==


==课时2 用Python设计第一个游戏==

小写的就是BIF
>>> dir(__builtins__)
['ArithmeticError', 'AssertionError', ''InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs',


help(int)


chapter 2

== 03 小插曲之变量和字符串   ===

有引号才是字符串:w

长字符串 用 """ str """

=== 04  改进我们的小游戏=== 

20170823

=== 5 闲聊之Python的数据类型===

In [1]: True + True 
Out[1]: 2

In [2]: True + False
Out[2]: 1

不要在线上用 

直接K掉小数点后面的
In [3]: int(5.99)
Out[3]: 5

int() str()  float()

注意 导致了 str 不是我们bif的str了 

In [4]: str = "I love you"

In [5]: str
Out[5]: 'I love you'

In [6]: c = str(5e19)
-----------------------------------------------------------------
TypeError                       Traceback (most recent call last)
<ipython-input-6-49a656b321ee> in <module>()
----> 1 c = str(5e19)

TypeError: 'str' object is not callable


type()
isinstance()

在py2 中好像不能这样用
>>> a = '我'
>>> isinstance(a,str)
True

=== 6 Pyhon之常用操作符  ===

a a+=3
b= c = d = e  =10

3 < 4 <5


=== 7 了不起的分支和循环1  ===

=== 8 了不起的分支和循环2  ===
assert 

In [1]: assert 3 >4
---------------------------------------------------------------------------
AssertionError  

In [2]: assert 5 >4

In [3]: 


=== 9 了不起的分支和循环3  ===
while

In [1]: fav = 'evan'
In [4]: for i in fav:
   ...:     print i
   ...:
e
v
a
n

cat 1.py
a = 'evan'
for i in a:
    print(i, end=' ')
python3  1.py
e v a n e


range()

for i in range(2,9):


continue

break



12:00


=== 10 列表：一个打了激素的数组1 ===

append()

 |  append(...)
 |      L.append(object) -- append object to end
 |

In [2]: L=[1,2,5]
In [3]: L.append(6)
In [4]: L
Out[4]: [1, 2, 5, 6]

In [6]: L.extend(['7','8'])

In [7]: L
Out[7]: [1, 2, 5, 6, '7', '8']

insert()


In [8]: L.insert(1,'my')

In [9]: L.insert(0,'my0')

In [10]: L
Out[10]: ['my0', 1, 'my', 2, 5, 6, '7', '8']


===  11 列表：一个打了激素的数组2 ===
LIST[0]

temp= LIST[0]
LIST[0]=LIST[1]
LIST[1]=temp

L.remove('love')

del L.[1] #是一个语句，不是方法

pop()


slice  分片 切片

L=[1,2,3,4,5]
L[1:2]
Out[16]:
[2]
L[1:3]
Out[17]:
[2, 3]

#算起步，但不算结尾数


==12 列表：一个打了激素的数组3 ==

in   not in

列表中的列表  访问 eg  list[1][2]

dir(list)
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']


reverse
count  index

==13 元组：戴上了枷锁的列表 ==
逗号是关键
逗号隔开的一组数据的集合就是元组

>>> temp2= 2,3
>>> type(temp2)
<class 'tuple'>
>>> 
>>> temp=()
>>> type(temp)
<class 'tuple'>

>>> temp=(1,)
>>> type(temp)
<class 'tuple'>

>>> 8 * (8,)
(8, 8, 8, 8, 8, 8, 8, 8)

>>> temp = (1,2,4,5)
>>> temp = temp[:2] + ('3',) + temp[2:]
>>> temp 
(1, 2, '3', 4, 5)

del temp 

==14 字符串：各种奇葩的内置方法==

>>> dir(str)

capitalize()  第一个字符改为大写     
str2.capitalize 

casefold

center()
In [2]: str='sdfj '

In [3]: str.center(30)
Out[3]: '            sdfj              '


count()
encode()

endswith()

find()



index()

isalnum()
isalpha()
isdecimal()
isdigit()
islower()
isnumeric()
isspace()
istitle()
issupper()
issupper()
join()

ljust()
lower()
lstrip()

partition(sub)

replace()
rfind()
replace()
rindex()
split()

translate()
>>> str='sssaaass'
>>> str.translate(str.maketrans('s','b'))
'bbbaaabb'
>>> str.maketrans('s','b')
{115: 98}

upper()

==15 字符串：格式化==

位置参数
>>> "{0} love {1}.{2}".format("I","evan","com")
'I love evan.com'

关键参数
>>> "{a} love {b}.{c}".format(a="I",b="evan",c="com")
'I love evan.com'

位置参数必需在关键参数之前



>>> "{{0}}".format("不打印")
'{0}'

: 表示格式化符号的开始 

>>> '{0:.1f}{1}'.format(27.658,'G')
'27.7G'

>>> '%c' % 97
'a'

>>> '%c %c %c' % (97, 98,99)
'a b c'

>>> '%s' %'my love'
'my love'


%x  , %X  , %F ,%E ,%e , %g , %G


格式化操作符辅助指令
m.n
- 左对齐 
+ 
# 
0 

==16 序列！序列==

help(list)

list()

len(a)

max(a)

>>> max(1,2,3,4)
4

min()

数据类型要一致，用上面的方法

sum()


sorted()

revecsed()

enumerate()

zip()


==17 函数：Python的乐高积木==

def func():
    print 'xxx'


==18 函数：灵活即强大==

function.__doc__

>>> help(print)

关键参数  不会像位置参数一样，顺序不对就没了

默认参数


收集参数（可变参数 *） 其实就是一个元组 ？

>>> def test(*params):
...     print ('参数的升为是', len(params));
...     print ('第二个参数是', params[1]);
...
>>> test(1,'evan',3.14,5,6,7,8)
参数的升为是 7
第二个参数是 evan

# 可变参数 + 其它参数 在最后面的只能是默认参数哦
>>> def test(*params,exp):
...     print ('参数的升为是', len(params));
...     print ('第二个参数是', params[1]);
...
>>> test(1,'evan',3.14,5,6,7,exp=8)
参数的升为是 6
第二个参数是 evan



==19 函数：我的地盘听我的 ==

默认返回元组


变量作用域
局部变量 全局变量


==20  函数：内嵌函数和闭包 ==

global

闭包

In [1]: def funx(x):
   ...:     def funy(y):
   ...:         return x * y
   ...:     return funy
   ...:

In [2]: i = funx(8)

In [3]: type(i)
Out[3]: function

In [4]: i(5)
Out[4]: 40

In [5]: funx(8)(5)
Out[5]: 40


def Fun1():
    x = 5
    def Fun2():
        x *= x
        return x
    return Fun2()
print Fun1()
'''
Traceback (most recent call last):
  File "fun1.py", line 7, in <module>
    print Fun1()
  File "fun1.py", line 6, in Fun1
    return Fun2()
  File "fun1.py", line 4, in Fun2
    x *= x
UnboundLocalError: local variable 'x' referenced before assignment

'''



#在2中的解决办法 通过容器来解决 ，不会屏蔽掉原来的变量  例如如下 列表不是存放在 栈里面
def Fun1():
    x = [5]
    def Fun2():
        x[0] *= x[0]
        return x[0]
    return Fun2()
print print Fun1()

'''
25
'''

nonlocal  py3 中的实现方式 


==21函数：lambda表达式==

In [1]: def ds(x):
   ...:     return 2 * x +1
   ...: 

In [2]: ds(5)
Out[2]: 11

In [3]: lambda x : 2 * x + 1
Out[3]: <function __main__.<lambda>>

In [4]: g= lambda x : 2 * x + 1

In [5]: g(5)
Out[5]: 11


In [1]: def add(x,y):
   ...:     return x + y
   ...: 

In [2]: add(3,4)
Out[2]: 7

In [3]: lambda x , y : x + y 
Out[3]: <function __main__.<lambda>>

In [4]: g = lambda x , y : x + y 

In [5]: g(3,4)
Out[5]: 7


BIF

filter 
help()

In [7]: filter(None,[1,0,False, True])
Out[7]: [1, True]
默认非True 的 去掉


In [8]: def odd(x):
   ...:     return x % 2
   ...: 

In [9]: tmp = range(10)
In [11]: show = filter(odd,tmp)

In [12]: list(show)
Out[12]: [1, 3, 5, 7, 9]

use filter to  实现 简洁 

In [13]: list(filter(lambda x : x % 2, range(10)))
Out[13]: [1, 3, 5, 7, 9]



map() 映射 

In [14]: list(map(lambda x : x * 2, range(10)))
Out[14]: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

==22 函数：递归是神马 ==

20170928

def  run1():
     return run1()

RuntimeError: maximum recursion depth exceeded

可以自己设置递归的深度



#!/usr/bin/python
#-*-coding:utf-8 -*-

def factorial(n):
    result = n
    for i in range(1,n):
        result *= i

    return result

number = int(input('please:'))
result = factorial(number)
print("%d 的阶乘是: %d" %(number,result))

"""
5 * 1 * 2 * 3 *4

please:5
5 的阶乘是: 120


阶乘
In [5]: for i in range(1,4):
   ...:     print  (i)
   ...:
1
2
3

[http://www.10tiao.com/html/383/201608/2247483733/1.html Python计算整数阶乘的几种方法比较]

"""


递归版本

#!/usr/bin/python
#-*-coding:utf-8 -*-
def factorial(n):
    if n == 1:
        return 1
    else:
        return  n * factorial(n-1)

number = int(input('please:'))
result = factorial(number)
print("%d 的阶乘是: %d" %(number,result))



[https://www.zhihu.com/question/22545138 请教python递归求阶乘的问题？]

==23 递归：这帮小兔崽子 ==

这个要重看一下比较 好

"""
迭代实现在不太懂呢
06：00 左右
"""
def fab(n):
    n1 = 1
    n2 =  1
    n3 = 1

    if n < 1:
        print('输入有错')
        return  -1
    while (n-2) > 0:
        n3 = n2 + n1
        n1 = n2
        n2 = n3
        n -=1
    return  n3

result = fab(20)
if result != -1:
    print ("总共有%d对兔子 生了" % result)


"""
13:16 图

递归 分治思想

14：00 the  end
"""
def fab(n):
    if n < 1:
        print ("输入有错!")
        return -1
    if n ==1  or n == 2:
        return 1
    else:
        return  fab(n-1)  + fab(n-2)

result = fab(20)
if result != -1:
    print ("总共有%d对兔子 生了" % result)



15：00



终于在上节喜欢上了递归










[http://study.163.com/course/courseMain.htm?courseId=1003686002 python自动化运维开发]



一边看视频  一边看相对应的书 



以前觉得基础教程2  好多内容 现在 终于觉得其实不多呢
 20170919




Sending env LANG = zh_CN.utf8


Linux书籍
http://www.linuxprobe.com/books/page/2


一个全栈增长工程师的练手项目集
https://github.com/phodal/ideabook

Python任务调度模块 – APScheduler
http://debugo.com/apscheduler/






print on python3



http://study.163.com/course/courseLearn.htm?courseId=378003#/learn/video?lessonId=493031&courseId=378003


数据结构和算法  小甲鱼


课后题 0基础课入门学习python 
http://bbs.fishc.com/forum-243-1.html

== 课时34  丰富的else语句及简洁的with语句==
with 可以在异常时很好用 不用关闭

== 36 ==
36 类和对象：给大家介绍对

继chen
In [1]: class Mylist(list):
   ...:     pass
   ...: 

In [2]: list2 = Mylist()

In [3]: list2.append(5)

In [4]: list2.append(3)

In [5]: list2
Out[5]: [5, 3]

In [6]: list2.sort()
In [7]: list2
Out[7]: [3, 5]


多态
In [8]: class A:
   ...:     def fun(self):
   ...:         print ("我是 小a'''")
   ...:         
In [9]: class B:
   ...:     def fun(self):
   ...:         print("我是小b''")
   ...:         

In [10]: a = A()
In [11]: b = B()

In [12]: a.fun()
我是 小a'''
In [13]: b.fun()
我是小b''


==37 类和对象：面向对象编程==

#!/usr/bin/python
#-*- coding:utf-8 -*-
class Ball:
    def setName(self,name):
        self.name = name
    def kick(self):
#        print("%s"  % self.name)
#        pass
        print("我叫%s,该死的谁踢我'''" % self.name)

a = Ball()
a.setName=('球a')
a.name
#b = Ball()
#b.setName=('球b')
#c = Ball()
#c.setName=('土豆')
a.kick()
#pass



Traceback (most recent call last):
  File "ball.py", line 13, in <module>
    a.name
AttributeError: Ball instance has no attribute 'name'

但是在ipython ok 


n [2]: class Ball:
   ...:     def setName(self,name):
   ...:         self.name = name
   ...:     def kick(self):
   ...:         print("我叫%s,该死的谁踢我'''" % self.name)
   ...:         

In [3]: a = Ball()

In [4]: a.setName('ball a')

In [5]: a.kick()
我叫ball a,该死的谁踢我'''

In [6]: b = Ball()

In [7]: b.setName('ball b')

In [8]: c = Ball()

In [9]: c.setName('土豆')

In [10]: c.kick()
我叫土豆,该死的谁踢我'''


******************
魔术方法之__init__
In [11]: class Ball:
    ...:     def __init__(self,name):
    ...:         self.name = name
    ...:     def kick(self):
    ...:         print("我叫%s,该死的谁踢我'''" % self.name)
    ...:         

In [12]: b = Ball('土豆')

In [13]: b.kick()
我叫土豆,该死的谁踢我'''

In [14]: c = Ball()

TypeError: __init__() takes exactly 2 arguments (1 given)

*************
公有 私有

In [15]: class Person:
    ...:     name = "evan"
    ...:     
In [16]: p=Person()

In [17]: p.name
Out[17]: 'evan'


私有变量 

In [18]: class Person:
    ...:     __name = "evan"
    ...:     
    ...:     

In [19]: p=Person()

In [20]: p.__name
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-20-5fe22c1da0df> in <module>()
----> 1 p.__name
AttributeError: Person instance has no attribute '__name'

怎么办呢 从内部

In [21]: class Person:
    ...:     __name = "evan"
    ...:     def getName(self):
    ...:         return self.__name
    ...:      

In [22]: p=Person()

In [23]: p.getName()
Out[23]: 'evan'

p.__name 还是不能直接用
但是可以作弊
In [25]: p._Person__name
Out[25]: 'evan'

==38 ==
类和对象：继承

In [1]: class Parent:
   ...:     def hello(self):
   ...:         print("正在调用父类的方法")

In [3]: class Child(Parent):
   ...:     pass


In [4]: p = Parent()

In [5]: p.hello()
正在调用父类的方法

In [6]: c = Child()

In [7]: c.hello()
正在调用父类的方法


同名的情况下 子类会覆盖父类

In [8]: class  Child(Parent):
   ...:     def hello(self):
   ...:         print("正在调用子类的方法'''")
   ...:         

In [9]: c = Child()

In [10]: c.hello()
正在调用子类的方法'''

In [11]: p.hello()
正在调用父类的方法


对于 同名的情况下 子类会覆盖父类 处理办法
1.调用未绑定的父类方法


2.使用supper function(这个方法更加好)
super().__init__()

===多重继承===

class Base1:
    def foo1(self):
        print("I am  foo1, I wei Base1 daiyan")

class Base2:
    def foo2(self):
        print("I am foo2, I wei  Base2 daiyan")
class C(Base1,Base2):
    pass

c = C()
c.foo1()
c.foo2()

注意了 这是基于py3.3的

== 39 类和对象：拾遗==
类 类对象和实例对象

In [1]: class C:
   ...:     count = 0
   ...:     

In [2]: a = C()

In [3]: b = C()

In [4]: c = C()

In [5]: a.count
Out[5]: 0

In [6]: b.count
Out[6]: 0

In [7]: c.count
Out[7]: 0


In [14]: c.count = 10

In [15]: c.count
Out[15]: 10

In [16]: a.count
Out[16]: 0

In [17]: C.count
Out[17]: 0

In [18]: C.count += 100

In [19]: a.count
Out[19]: 100

In [20]: c.count
Out[20]: 10


In [21]: class C:
    ...:     def x(self):
    ...:         print("x=man")
    ...:         

In [22]: c =C()

In [23]: c.x()
x=man

In [24]: c.x =  1

In [25]: c.x
Out[25]: 1

In [26]: c.x()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-26-54c1306e95b7> in <module>()
----> 1 c.x()

TypeError: 'int' object is not callable

由上可以看到 如果属性和方法同名 属性会 覆盖方法
****

绑定 
python 严格要求方法需要有实例才能被调用，这限制其实就是py所谓的绑定概念

错误举例
In [28]: class BB:
    ...:     def printBB():
    ...:         print("no zuo no die")
    ...:         

#有可能可以打印 
In [29]: BB.printBB()

In [31]: bb = BB()

In [32]: BB.printBB()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-32-8541405c8d5c> in <module>()
----> 1 BB.printBB()

TypeError: unbound method printBB() must be called with BB instance as first argument (got nothing instead)


In [33]: class CC:
    ...:     def setXY(self, x,y):
    ...:         self.x = x
    ...:         self.y = y
    ...:     def printXY(self):
    ...:         print(self.x, self.y)
    ...:         

In [34]: dd = CC()
In [36]: dd.__dict__
Out[36]: {}

In [37]: CC.__dict__
Out[37]: 
{'__doc__': None,
 '__module__': '__main__',
 'printXY': <function __main__.printXY>,
 'setXY': <function __main__.setXY>}


In [38]: dd.setXY(4,5)

In [39]: dd.__dict__
Out[39]: {'x': 4, 'y': 5}
在dd里面有 而在 CC  __dict__ 里面没有 只属于实例对象dd

In [40]: del CC

In [41]: ee = CC()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-41-b626c5c9f95d> in <module>()
----> 1 ee = CC()

NameError: name 'CC' is not defined

实例对象的还存在的 因为类属性和方法是静态的 一直在内存中 直到程序退出
In [43]: dd.printXY()
(4, 5)

以上就是讲了绑定的概念  尽量不要类属性 而是使用实例属性

==40 类和对象：一些相关的BIF==

In [44]: class A:
    ...:     pass
    ...: 
In [47]: class B(A):
    ...:     pass
    ...: 

In [48]: issubclass(B,A)
Out[48]: True

In [49]: issubclass(B,B)
Out[49]: True

#如果py3 为True
In [50]: issubclass(B,object)
Out[50]: False

In [51]: class C:
    ...:     pass
    ...: 

In [52]: issubclass(B,C)
Out[52]: False



isinstance(object,classinfo)

In [53]: b1 = B()

In [54]: isinstance(b1,B)
Out[54]: True
## B 类来自A类
In [55]: isinstance(b1,A)
Out[55]: True

In [57]: isinstance(b1,C)
Out[57]: False


In [58]: isinstance(b1,(A,B,C))
Out[58]: True

*****
hasattr(object,name)

In [59]: class C:
    ...:     def __init__(self,x=0):
    ...:         self.x = x
    ...:         

In [60]: c1 = C()

In [61]: hasattr(c1,'x')
Out[61]: True

In [62]: hasattr(c1,x)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-62-83051dc9a513> in <module>()
----> 1 hasattr(c1,x)

NameError: name 'x' is not defined


***

这个记得很久以前看py教程时有的
getattr(object,name[,default])

In [63]: getattr(c1,'x')
Out[63]: 0

In [64]: getattr(c1,'y')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-64-9fc2adeb1eb0> in <module>()
----> 1 getattr(c1,'y')

AttributeError: C instance has no attribute 'y'

In [65]: getattr(c1,'y','not attr is y')
Out[65]: 'not attr is y'


setattr(object,name, value)

In [66]: setattr(c1,'y','evan')

In [67]: getattr(c1,'y','not attr is y')
Out[67]: 'evan'

***
delattr(objcect,name)

In [68]: delattr(c1,'y')

In [69]: delattr(c1,'y')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-69-23149f9e774e> in <module>()
----> 1 delattr(c1,'y')

AttributeError: C instance has no attribute 'y'


******
属性设置属性？
property(fget=None,fset=None, fdel=None,doc=None)

In [70]: class c:
    ...:     def __init__(self,size=10):
    ...:         self.size = size
    ...:     def getSize(self):
    ...:         return self.size
    ...:     def setSize(self):
    ...:         self.size = value
    ...:     def delSize(self):
    ...:         del self.size
    ...:     x = property(getSize,setSize,delSize)

In [73]: c1 = c()

In [74]: c1.getSize()
Out[74]: 10

In [75]: c1.x
Out[75]: 10

In [76]: c1.x = 18

In [77]: c1.x
Out[77]: 18

20170815
到12分出错没看下去 




09


==chatper 11 魔法方法==

===41.魔法方法:构造和析构===

魔法方法总是被双下划线包围 eg __init__

__init__(self[,])   返回值得一定是None  其实就是 别的语言的构造方法

注意了 其实实例化时调用的第一个方法 是 __new__(cls[, ...]) 

In [83]: class Rectangle:
    ...:     def __init__(self,x,y):
    ...:         self.x = x
    ...:         self.y = y
    ...:     def getPeri(self):
    ...:         return (self.x + self.y) *2
    ...:     def getArea(self):
    ...:         return self.x * self.y
    ...:     

In [84]: rect = Rectangle(3,4)

In [85]: rect.getPeri()
Out[85]: 14

In [86]: rect.getArea()
Out[86]: 12

t.getArea()
543Out[86]: 12



In [89]: class CapStr(str):
    ...:     def __new__(cls,string):
    ...:         string = string.upper()
    ...:         return str.__new__(cls,string)

In [90]: a = CapStr("I love evan.com")

In [91]: a
Out[91]: 'I LOVE EVAN.COM'

由上可见 在改变一下不可变的对象 例如 str 时，就可以 改写一下 


***
__del__(self)

In [92]: class C:
    ...:     def __init__(self):
    ...:         print ("I am __init__")
    ...:     def __del__(self):
    ...:         print ("I am __del__")
    ...:         

In [93]: c1 = C()
I am __init__

In [94]: c2 = c1
In [95]: c3 = c2
In [96]: del c3
In [97]: del c2
In [98]: del c1
I am __del__


== 42.魔法方法：算术运算==

对于现在来说
可见 所谓的工厂function 就是类对象

>>> type(dir)
<class 'builtin_function_or_method'>
>>> type(int)
<class 'type'>


>>> class C:
...     pass
... 
>>> type(C)
<class 'type'>



evan@evanpc:~/github/python/allpynotes$ cat sub.py
class New_int(int):
    def __add__(self,other):
        return int.__sub__(self,other)
    def __sub__(self,other):
        return int.__add__(self,other)

a = New_int(3)    
b = New_int(5)
print a+b
print a - b

"""


-2
8

a --> self  b -->other
故意a +b  其实是a 减去b
"""

== 43.魔法方法：算术运算2==

In [1]: class int(int):
   ...:     def __add__(self,other):
   ...:         return int.__sub__(self,other)
   ...:     

In [2]: a = int('5')
In [3]: a
Out[3]: 5

In [4]: b = int(3)
In [5]: a + b 
Out[5]: 2


此时 self is a  other is  b 
那只有一个参数的 a 呢 

反运算

当第一个参数没有动作时 就触发了反运行 




******反运算 有怪现象


奇怪的 和写在文件的运行的不一样
In [6]: class Nint(int):
   ...:     def __radd__(self,other):
   ...:         return int.__sub__(self,other)
   ...:     

In [7]: a = Nint(5)

In [8]: b = Nint(3)

In [9]: a+b
Out[9]: 2

In [10]: a + b 
Out[10]: 2

******反运算 有怪现象


In [1]: class Nint(int):
   ...:     def __rsub__(self,other):
   ...:         return int.__sub__(self,other)
   ...:     

In [2]: a = Nint(5)

In [3]: 3 - a
Out[3]: 2


可见上面顺序不太对 反了呢


注重操作数顺序的减法 位  等等 在重写反运算时要注意了

return int.__sub__(other, self )


==44. 魔法方法：简单定制==
做一下定时器

04:00  后面的还没看 暂时跳过



==45  魔法方法：属性访问 ==

n [2]: class C:
   ...:     def __init__(self):
   ...:         self.x = 'x-man'
   ...:         

In [3]: c = C()

In [4]: c.x
Out[4]: 'x-man'

In [5]: getattr(c,'x','没有这个属性')
Out[5]: 'x-man'

In [6]: getattr(c,'y','没有这个属性')





02:00




看看视频 再看书 真的理解得更加快快 





  



Python print函数用法，print 格式化输出
http://www.pythonclub.org/python-basic/print#dokuwiki__top

****************************************

Python资料推荐 + IDE推荐+经典练手项目（开源免费）~
http://www.jianshu.com/p/d9fc43995fde

分分钟学会一门语言之Python篇
http://www.code123.cc/1049.html

Python快速教程
http://www.cnblogs.com/vamei/archive/2012/09/13/2682778.html

学习Python在Linux运维上的应用应该看哪些书 、什么样的学习路线
https://www.zhihu.com/question/25955197

运维人员学习python 推荐资料
https://blog.imdst.com/yun-wei-xue-pythontui-jian-shu-ji/

[http://www.cnblogs.com/xiaowuyi/archive/2012/08/06/2625509.html python网络编程学习笔记（3）：socket网络服务器]

[http://yangrong.blog.51cto.com/6945369/1339593  python socket编程详细介绍]

http://www.chinaunix.net/ops/

python
https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/

 Linux服务器如何自定义安装Redis
http://blog.csdn.net/xiexieliuyi/article/details/51124215


