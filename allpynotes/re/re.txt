
==re.match函数==

re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。
函数语法：
re.match(pattern, string, flags=0)

In [26]: import re

In [27]: print(re.match('www','www.linuxchina.net'))
<_sre.SRE_Match object at 0x7f0bc898af38>

In [31]: print(re.match('www','www.linuxchina.net').span())
(0, 3)

In [30]: print(re.match('com','www.linuxchina.net'))
None

解说:
span函數則是start和end函數的結合體，返回的整個index的範圍。

#!/usr/bin/python
import re
line = "Cats are smarter than dogs"

matchObj = re.match(r'(.*) are (.*?) .*', line ,re.M|re.I)

if matchObj:
    print "matchObj.group():" , matchObj.group()
    print "matchObj.group(1):" , matchObj.group(1)
    print "matchObj.group(2):" , matchObj.group(2)
else:
    print "no match"

解说:
group(1) re 第一个 (.*)  group(2) 匹配第二个(.*)
line ,re.M|re.I) 不太明白 

==re.search方法==
re.search 扫描整个字符串并返回第一个成功的匹配。

eg1
#!/usr/bin/python
import re
print(re.search('www','www.linuxchina.net').span())
print(re.search('net','www.linuxchina.net').span())
#结果
(0, 3)
(15, 18)

eg2
#!/usr/bin/python
import re
line = "Cats are smarter than dogs"
'''
re.M	多行匹配，影响 ^ 和 $
re.I	使匹配对大小写不敏感
'''

searchObj = re.search(r'(.*) are (.*?) than (.*).*', line ,re.M|re.I)

if searchObj:
    print "searchObj.group():" , searchObj.group()
    print "searchObj.group(1):" , searchObj.group(1)
    print "searchObj.group(2):" , searchObj.group(2)
    print "searchObj.group(3):" , searchObj.group(3)

结果
searchObj.group(): Cats are smarter than dogs
searchObj.group(1): Cats
searchObj.group(2): smarter
searchObj.group(3): dogs


re.match与re.search的区别
re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。

==检索和替换==

Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。
re.sub(pattern, repl, string, count=0, flags=0)

参数：
pattern : 正则中的模式字符串。
repl : 替换的字符串，也可为一个函数。
string : 要被查找替换的原始字符串。
count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。

#!/usr/bin/python
#-*- coding: utf-8 -*-
import re
phone="2004-959-559 #这·是个外国号码"

#删除字符串中的py 注释
num = re.sub(r'#.*$', "",phone)
print "电话号码:", num 

#删除非数字(-)
num = re.sub(r'\D', "",phone)
print "电话号码是:", num

结果
电话号码: 2004-959-559 
电话号码是: 2004959559


repl 参数是一个函数

#-*- coding: utf-8 -*-
'''
\d   匹配数字，相当于[0-9]
【总结】
1. 一般多数是通过matched.group(name)的方式去获得对应所查找到的字符串的。
2. 关于匹配之前已经出现的字符串，可以使用:
（1）在re.search等中，使用(?P=name)；
（2）在re.sub的被替换的字符串中，使用\g<name>的方式获得之前已命名的group的值
'''
import re
#将匹配的数字乘于 2
def double(matched):
    value = int(matched.group('value'))
    return str(value * 2)

s = 'A23G4HFD567'
print(re.sub('(?P<value>\d+)', double ,s))

***
A46G8HFD1134
***
知识点 命令组

例子 re.sub('(?P<value>\d+)
Python 新增了一个扩展语法到 Perl 扩展语法中。如果在问号后的第一个字符是 "P"，你就可以知道它是针对 Python 的扩展。目前有两个这样的扩展: (?P<name>...) 定义一个命名组，(?P=name) 则是对命名组的逆向引用。如果 Perl 5 的未来版本使用不同的语法增加了相同的功能，那么 re 模块也将改变以支持新的语法，与此同时为了兼容性的目的而继续保持的 Python 专用语法。

命令组的语法是 Python 专用扩展之一： (?P<name>...)。名字很明显是组的名字。除了该组有个名字之外，命名组也同捕获组是相同的。`MatchObject` 的方法处理捕获组时接受的要么是表示组号的整数，要么是包含组名的字符串。命名组也可以是数字，所以你可以通过两种方式来得到一个组的信息：


学习 group groups  ?P
==emacs==
C-s搜索时是向前进行查找，我们还可以使用C-r (isearch-backward)向后进行查找，

http://www.cnblogs.com/skyhacker/archive/2012/01/03/2311437.html  emacs查找替换
http://www.cnblogs.com/robertzml/archive/2010/03/03/1675870.html

==参考==
[http://www.runoob.com/python/python-reg-expressions.html Python正则表达式]
