view-->tool windows -->terminal
== chapter 1  入门==
Django
https://zh.wikipedia.org/wiki/Django
http://www.ziqiangxuetang.com/django/django-intro.html

===django安装=== 

doc
https://docs.djangoproject.com/en/1.8/releases/1.8/


*各种发行版本

FreeBSD
There are two options:
To add the package: pkg install py-django
To install the port: cd /usr/ports/www/py-django/ && make install clean
For recent changes ​http://www.freshports.org/www/py-django/

https://code.djangoproject.com/wiki/Distributions
sudo pkg install mysql57-server


也可以源码 下载  

https://www.djangoproject.com/download/
fetch https://www.djangoproject.com/m/releases/1.8/Django-1.8.18.tar.gz
tar xvf Django-1.8.18.tar.gz &&	cd Django-1.8.18  && 	python setup.py install

#uninstall 
 pip uninstall Django


mysql 
This is the mysql CLIENT without the server.
for complete server and client, please install databases/mysql57-server

* * * * * * * * * * * * * * * * * * * * * * * *
Message from mysql57-server-5.7.17_4:
*****************************************************************************

Remember to run mysql_upgrade the first time you start the MySQL server
after an upgrade from an earlier version.

Initial password for first time use of MySQL is saved in $HOME/.mysql_secret
ie. when you want to use "mysql -u root -p" first you should see password
in /root/.mysql_secret

MySQL57 has a default %%ETCDIR%%/my.cnf,
remember to replace it wit your own
or set `mysql_optfile="$YOUR_CNF_FILE` in rc.conf

 You must reset your password using ALTER USER statement before executing this statement.

安装完mysql 之后，登陆以后，不管运行任何命令，总是提示这个

step 1: SET PASSWORD = PASSWORD('__love$u');

step 2: ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;

step 3: flush privileges;

完成以上三步退出再登，使用新设置的密码就行了，以上除了红色的自己修改成新密码外，其他原样输入即可

参考1: https://dev.mysql.com/doc/refman/5.6/en/alter-user.html

参考2: http://dev.mysql.com/doc/refman/5.7/en/password-expiration-policy.html

参考3: http://stackoverflow.com/questions/33467337/reset-mysql-root-password-using-alter-user-statement-after-install-on-mac







https://docs.djangoproject.com/en/1.8/topics/install/#installing-official-release

#https://www.djangoproject.com/download/
sudo apt-get install python-pip

====1 pip 安装====
#来个LTS的 1.8 就这个了 2017.03.22pm
sudo  pip install Django
(sudo) pip install Django==1.8 或者 pip install Django==1.7.6

python -c "import django; print(django.get_version())"

#kali 2016  这个太新了 不要 
In [1]: import django

In [11]: django.VERSION
Out[11]: (1, 8, 0, 'final', 0)

====2 easy_install 安装====
安装 setuptools
yum install setuptools

完成之后，就可以使用 easy_install 命令安装 django
easy_install django

==== 注意====
我们会遇到这样的情况，有的项目需要 Django 1.5, 有的项目需要 Django 1.8，每个项目依赖不同，但是还要运行在同一个电脑或服务器上，应该怎么办呢？ 

用 virtualenv 可以做到！参见 Python 三大神器第二部分：http://www.ziqiangxuetang.com/python/pip-virtualenv-fabric.html


 mvc

http://djangobook.py3k.cn/chapter01/


Django-admin-bootstrap
https://wiki.linuxchina.net/index.php?title=Django-admin-bootstrap

== chapter1  Writing your first Django app, part 1==

=== 创建一个项目 ===
/usr/local/bin/django-admin.py

在当前目录创建一个 mysite 目录
django-admin.py  startproject mysite
sudo apt install tree -y 
evan@evanpc:~/python/django$ tree mysite/
mysite/
├── manage.py
└── mysite
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
models.py 文件主要用一个 Python 类来描述数据表。称为 模型(model) 。 运用这个类,你可以通过简单的 Python 的代码来创建、检索、更新、删除 数据库中的记录而无需写一条又一条的 SQL 语句。

view.py 文件的 latest_books() 函数中包含了该页的业务层逻辑。这个函数叫做 视图(view) 。

urls.py 指出了什么样的 URL 调用什么的视图,在这个例子中 /latest/ URL 将会调用 latest_books() 这个函数

latest_books.html 是 html 模板,它描述了这个页面的设计是如何的。

这些文件是：

外层的mysite/根目录仅仅是项目的一个容器。它的命名对Django无关紧要；你可以把它重新命名为任何你喜欢的名字。
manage.py：一个命令行工具，可以使你用多种方式对Django项目进行交互。 你可以在django-admin和manage.py中读到关于manage.py的所有细节。
内层的mysite/目录是你的项目的真正的Python包。它是你导入任何东西时将需要使用的Python包的名字（例如 mysite.urls）。
mysite/__init__.py：一个空文件，它告诉Python这个目录应该被看做一个Python包。 （如果你是一个Python初学者，关于包的更多内容请阅读Python的官方文档）。
mysite/settings.py：该Django 项目的设置/配置。Django 设置 将告诉你这些设置如何工作。
mysite/urls.py：该Django项目的URL声明；你的Django站点的“目录”。 你可以在URL 转发器 中阅读到关于URL的更多内容。
mysite/wsgi.py：用于你的项目的与WSGI兼容的Web服务器入口。 更多细节请参见如何利用WSGI进行部署。

 __init__.py :让 Python 把该目录当成一个开发包 (即一组模块)所需的文件。
 manage.py :一种命令行工具,可让你以多种方式与该 Django 项目进行交互。
 settings.py :该 Django 项目的设置或配置。
 urls.py :该 Django 项目的 URL 声明,即 Django 所支撑站点的内容列表

==== 数据库的建立= ===
# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
http://www.cnblogs.com/wendoudou/p/mysql.html

https://docs.djangoproject.com/en/1.8/ref/databases/#mysql-notes


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'djangodb',                      # Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '127.0.0.1',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '3306',                      # Set to empty string for default.
    }
}

没报错则成功！
evan@evanpc:~/python/django/mysite$ python manage.py shell
Python 2.7.13 (default, Jan 19 2017, 14:48:08) 
In [1]: from django.db import connection
In [2]:  cursor = connection.cursor()

===== 开发服务器=====
进入外层 mysite 目录并运行 python manage.py runserver

evan@evanpc:~/python/django$ cd mysite/
evan@evanpc:~/python/django/mysite$ python manage.py runserver
Performing system checks...
You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.

Django version 1.10.6, using settings 'mysite.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

尽管对于开发来说,这个开发服务器非常得棒,但一定要打消在产品级环境中使用该服务器 的念头。在同一时间,该服务器只能可靠地处理一次单个请求,并且没有进行任何类型的安 全审计。发布站点前,请参阅第 20 章了解如何部署 Django 

更改主机或端口
默认情况下, runserver 命令在 8000 端口启动开发服务器,且只监听本机连接。要想要 更改服务器端口的话,可将端口作为命令行参数传入: python manage.py runserver 8080
还可以改变服务器监听的 IP 地址。要和其他开发人员共享同一开发站点的话,该功能特别 有用。下面的命令:
python manage.py runserver 0.0.0.0:8080

=== 创建模型 ===
项目 vs. 应用
项目和应用之间有什么不同？ 应用是一个Web应用程序，它完成具体的事项 —— 比如一个博客系统、一个存储公共档案的数据库或者一个简单的投票应用。 项目是一个特定网站中相关配置和应用的集合。一个项目可以包含多个应用。一个应用可以运用到多个项目中去。

你的应用可以放在Python path上的任何位置。在本教程中，我们将在你的manage.py文件同级目录创建我们的投票应用，以便可以将它作为顶层模块导入，而不是mysite的子模块。
确保你在与manage.py相同的目录下，并且键入以下命令来创建你的应用： 
$ python manage.py startapp polls


evan@evanpc:~/python/django/mysite$ tree  polls/
polls/
├── admin.py
├── __init__.py
├── migrations
│   └── __init__.py
├── models.py
├── tests.py
└── views.py

===激活模型=== 
## pro
You have unapplied migrations; your app may not work properly until they are applied.
Run 'python manage.py migrate' to apply them.


django/mysite$ python manage.py makemigrations polls
Migrations for 'polls':
  0001_initial.py:
    - Create model Choice
    - Create model Question
    - Add field question to choice
    
一个命令可以运行这些迁移文件并自动管理你的数据库模式 —— 它叫做migrate，我们一会儿会用到它 —— 但是首先，让我们看一下迁移行为将会执行哪些SQL语句。sqlmigrate命令接收迁移文件的名字并返回它们的SQL语句：

$ python manage.py sqlmigrate polls 0001

sqlmigrate命令并不会在你的数据库上真正运行迁移文件 —— 它只是把Django 认为需要的SQL打印在屏幕上以让你能够看到。 这对于检查Django将要进行的数据库操作或者你的数据库管理员需要这些SQL脚本是非常有用的。

如果有兴趣，你还可以运行python manage.py check；它会检查你的项目中的模型是否存在问题，而不用执行迁移或者接触数据库。

现在，再次运行migrate以在你的数据库中创建模型所对应的表：
python manage.py migrate


修改你的模型（在models.py文件中）。
运行python manage.py makemigrations ，为这些修改创建迁移文件
运行python manage.py migrate ，将这些改变更新到数据库中。

阅读django-admin 的文档来了解manage.py 工具能做的所有事情。
http://python.usyiyi.cn/translate/django_182/ref/django-admin.html

	    
===玩转API===

http://python.usyiyi.cn/translate/django_182/intro/tutorial02.html
不太明白


python manage.py shell

Once you’re in the shell, explore the database API:
http://python.usyiyi.cn/translate/django_182/topics/db/queries.html

>>> from polls.models import Question, Choice   # Import the model classes we just wrote.

# No questions are in the system yet.
>>> Question.objects.all()
[]

# Create a new Question.
# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

# Save the object into the database. You have to call save() explicitly.
>>> q.save()

# Now it has an ID. Note that this might say "1L" instead of "1", depending
# on which database you're using. That's no biggie; it just means your
# database backend prefers to return integers as Python long integer
# objects.
>>> q.id
1

# Access model field values via Python attributes.
>>> q.question_text
"What's new?"
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

# Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()

# objects.all() displays all the questions in the database.
>>> Question.objects.all()
[<Question: Question object>]





== chapter2 编写你的第一个Django应用，第2部分 ==
=== 创建一个管理员用户===
python manage.py createsuperuser

=== 启动开发服务器===
 python manage.py runserver 0.0.0.0:80  # or
sudo python manage.py runserver 192.168.1.158:80

http://192.168.1.158/admin/
===进入管理站点===
你将看到几类可编辑的内容：groups和users。 它们是由django.contrib.auth提供的，这个认证框架集成在Django中。

=== 让poll应用在管理站点中可编辑===
只需要做一件事：我们需要告诉管理站点Question 对象要有一个管理界面。 要做这件事，需要打开polls/admin.py文件，把它编辑成这样：
polls/admin.py

from django.contrib import admin
from .models import Question
admin.site.register(Question)


==== 探索管理站点的功能====


=== 自定义管理表单===

你没有写多少代码，却得到了这一切。 只需使用admin.site.register(Question)注册Question模型，Django就能构造一个默认的表单表示。通常，你会想要自定义管理界面中表单的外观和功能。 你可以通过在注册对象的时候告知Django一些你想要的选项来完成。

让我们通过对编辑表单上的字段重新排序来看一下它是如何工作的。 将admin.site.register(Question)行替换成：
polls/admin.py

from django.contrib import admin

from .models import Question

class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

admin.site.register(Question, QuestionAdmin)

无论何时，当你需要修改一个对象的管理选项的话，就按照这样的步骤来做：创建一个模型管理对象（class），然后把该对象（class名）作为第二个参数传入admin.site.register()。

上面那特定的更改，使得“Publication date”字段排在“Question”字段前面：


===添加关联对象==
值得一看哦

===自定义管理界面中的变更列表===

===自定义管理站点的外观===
http://python.usyiyi.cn/translate/django_182/intro/tutorial02.html






== chapter3 编写你的第一个Django应用，第3部分=

http://python.usyiyi.cn/translate/django_182/intro/tutorial03.html

Django使用叫做‘URLconfs’的配置来为URL匹配视图。 一个URLconf负责使用正则表达式将URL模式匹配到视图。

本教程提供URLconfs使用过程中的基本指令，更多信息请参考django.core.urlresolvers。
http://python.usyiyi.cn/translate/django_182/ref/urlresolvers.html#module-django.core.urlresolvers



=== 编写你的第一个视图 ===


让我们来编写第一个视图。 打开polls/views.py文件并将以下Python代码写入：
polls/views.py

from django.http import HttpResponse


def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

这可能是Django中最简单的视图。 为了能够调用这个视图，我们需要将这个视图映射到URL上 —— 利用一个URLconf。

为了在投票应用目录内部创建URLconf，需要创建一个urls.py文件。你的应用的目录现在看起来应该像这样：

polls/
    __init__.py
    admin.py
    models.py
    tests.py
    urls.py
    views.py

在polls/urls.py文件中键入如下代码：
polls/urls.py

from django.conf.urls import url

from . import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
]

下一步，让主URLconf可以链接到polls.urls模块。在mysite/urls.py中插入一个include()：
mysite/urls.py

from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [
    url(r'^polls/', include('polls.urls')),
    url(r'^admin/', include(admin.site.urls)),
]

现在我们已经将一个index视图关联到URLconf中。在你的浏览器中浏览 http://localhost:8000/polls/ , 你会看到 “Hello, world. You’re at the polls index.”, 正如你在index 视图中定义的那样.


==== url() 参数：regex====
====url() 参数：view====
====url() 参数：name====

===编写更多的视图 ===

多看一下 不错不错

#today is ok  20170419pm
http://192.168.1.158/polls/34/vote/

===编写拥有实际功能的视图===

here




=== 将 URL 映射到视图 ===




django学习感想
昨天视图相关的看不懂，还各自出错
今天再次重新详细看了一下  终于明白了很多






django 后台中文界面
在setting.py
#LANGUAGE_CODE = 'en-us'
改为
LANGUAGE_CODE = 'zh-hans'


让 DJANGO 的 ADMIN 界面显示中文
https://www.huangwenchao.com.cn/2014/02/django-tip-2.html






== note from  runoob   ==
== Django 创建第一个项目==

=== Django 管理工具 ===

evan@evanpc:~/python/django/mysite$ tree 
.
├── manage.py    一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互
├── mysite
│   ├── __init__.py
│   ├── __init__.pyc
│   ├── settings.py
│   ├── settings.py~
│   ├── settings.pyc
│   ├── settings.pyy
│   ├── settings.pyY
│   ├── urls.py
│   ├── urls.pyc
│   ├── views.py
│   ├── wsgi.py
│   └── wsgi.pyc

目录说明：
 manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。
__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。
settings.py: 该 Django 项目的设置/配置。
urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。
wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。


=== 视图和 URL 配置===












如果对了解 Python 搜索路径值感兴趣,可以启动 Python 交互式解释程序,输入 import sys ,接着输入 print sys.path 。


https://docs.djangoproject.com/en/1.8/
http://python.usyiyi.cn/django/topics/forms/index.html

http://djangobook.py3k.cn/2.0/chapter02/



http://www.ziqiangxuetang.com/django/django-tutorial.html

forms 我直接用bootstrap的，很简单，就一句话
{% bootstrap_form form layout='horizontal' %}

它自动帮你解释成html的语句



os 64位的CentOS 6.8
环境搭建

Django Nginx+uwsgi 安装配置



==升级python 2.7 ==

1.update python2.7
#wget http://mirrors.sohu.com/python/2.7.6/Python-2.7.6.tar.xz
wget http://mirrors.sohu.com/python/2.7.8/Python-2.7.8.tar.xz
tar xvf Python-2.7.8.tar.xz  &&  cd Python-2.7.8
./configure --prefix=/usr/local/python27
 make -j4  && make install
/usr/local/python27/bin/python2.7
2. mv /usr/bin/python /usr/bin/python2.6bak
ln -s /usr/local/python27/bin/python2.7 /usr/bin/python
#这个是对全局有效果的

3.解决系统python软链接指向python2.7版本后，yum不能正常工作
方法：
vi /usr/bin/yum
将文本编辑显示的第一行
#!/usr/bin/python修改为#!/usr/bin/python2.6，保存修改即可

python -V

https://wiki.linuxchina.net/index.php?title=How_to_install_python2.7_on_centos6.x

另外还需要安装 python 工具需要的额外软件包 SSL, bz2, zlib
yum install -y zlib-devel bzip2-devel openssl-devel xz-libs wget


== update pip and setuptools==

git clone https://github.com/pypa/setuptools.git

cd  setuptools/command && python  setup.py  install










wget https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz
tar xvf pip-9.0.1.tar.gz && cd pip-9.0.1/
sudo python setup.py install 

find / -name "pip*"

/usr/local/python27/bin/pip

	
ln -s /usr/local/python27/bin/pip /usr/bin/pip
 
如果有老的pip 就先 bak一下 ，然后 和

##这个还没用过 好像不成功 
wget https://bootstrap.pypa.io/get-pip.py
python get-pip.py


==安装基础开发包==
Centos 下安装步骤如下：
yum groupinstall "Development tools"
yum install  python-devel  zlib-devel   zlib-devel gcc    bzip2-devel pcre-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel
#yum install openssl  -y


wget -c https://pypi.python.org/packages/a5/e9/51b544da85a36a68debe7a7091f068d802fc515a3a202652828c73453cad/MySQL-python-1.2.5.zip#md5=654f75b302db6ed8dc5a898c625e030c
wget -c https://pypi.python.org/packages/a5/e9/51b544da85a36a68debe7a7091f068d802fc515a3a202652828c73453cad/MySQL-python-1.2.5.zip

unzip MySQL-python-1.2.5.zip 
cd MySQL-python-1.2.5
 python setup.py  install

安装PCRE 如果没有安装的话 

下载并解压

wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.37.tar.gz
tar zxvf pcre-8.37.tar.gz
编译安装
cd pcre-8.37
./configure
make && make install
安装完成后可以查看版本号pcre-config --version


安装Nginx

安装uWSGI 这个安装后 发现不了呀  应该是加path就行了 
pip install uwsgi

uwsgi --plugin python --http-socket :8001 --wsgi-file test.py

#测试时要用，不测试是不是不用安装呢 
yum install uwsgi-plugin-python

安装Django

yum install MySQL-python -y 
pip install django

 wget --no-check-certificate -c https://www.djangoproject.com/m/releases/1.8/Django-1.8.18.tar.gz
 
 pip install Django==1.8.18
 
tar xvf Django-1.8.18.tar.gz  &&  cd Django-1.8.18
python setup.py install

Installing django-admin.py script to /usr/local/python27/bin
Installing django-admin script to /usr/local/python27/bin


echo 'export PATH=/usr/local/python27/bin/:$PATH' >>/etc/profile && source /etc/profile

 
 测试 django 是否正常，运行：
django-admin.py startproject demosite
cd demosite
python2.7 manage.py runserver 0.0.0.0:8002
在浏览器内输入：http://127.0.0.1:8002，检查django是否运行正常。


[20/Apr/2017 03:27:30] "GET / HTTP/1.1" 500 59
Traceback (most recent call last):
  File "/usr/local/python27/lib/python2.7/wsgiref/handlers.py", line 85, in run
    self.result = application(self.environ, self.start_response)
  File "/usr/local/python27/lib/python2.7/site-packages/Django-1.8.18-py2.7.egg/django/contrib/staticfiles/handlers.py", line 63, in __call__
    return self.application(environ, start_response)




 
http://192.168.1.240:8002/
A server error occurred.  Please contact the administrator.

DisallowedHost: Invalid HTTP_HOST header: '192.168.2.228:8002'. You may need to add u'192.168.2.228' to ALLOWED_HOSTS.
[20/Apr/2017 04:32:02] "GET /favicon.ico HTTP/1.1" 500 59

添加  u'192.168.2.228' 到  ALLOWED_HOSTS = [u'192.168.1.240']
然后就好了  所以出错 还是要看log 和相关输出 去goolge 不一定能找到原因 ，要靠自己哦 

 
到这里我们已经把需要安装的东西都准备好了，现在开始进行配置






192.168.1.240


How To Serve Django Applications with uWSGI and Nginx on CentOS 7
https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-centos-7




==安装Python包管理==
easy_install 包 https://pypi.python.org/pypi/distribute
安装步骤:
cd ~
wget https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz
tar xf distribute-0.6.49.tar.gz
cd distribute-0.6.49
python2.7 setup.py install
easy_install --version

wget -c https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz#md5=35f01da33009719497f01a4ba69d63c9


Pip安装和使用
https://wiki.linuxchina.net/index.php?title=Pip%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8

rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
 yum install -y python-pip





安装 uwsgi
uwsgi:https://pypi.python.org/pypi/uWSGI
uwsgi 参数详解：http://uwsgi-docs.readthedocs.org/en/latest/Options.html
yum install uwsgi
pip install uwsgi
uwsgi --version    # 查看 uwsgi 版本
测试 uwsgi 是否正常：
新建 test.py 文件，内容如下：
def application(env, start_response):
	start_response('200 OK', [('Content-Type','text/html')])
	return "Hello World"
然后在终端运行：
uwsgi --http :8001 --wsgi-file test.py

uwsgi: option '--http' is ambiguous
getopt_long() error

uwsgi --plugin python --http-socket :8001 --wsgi-file test.py


升级pip 
wget https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz#md5=35f01da33009719497f01a4ba69d63c9
python2.7 setup.py  install


在浏览器内输入：http://127.0.0.1:8001，查看是否有"Hello World"输出，若没有输出，请检查你的安装过程。



==安装 Django==


其它就是源码的过程  省了 
 python2.7   setup.py  install
 
 
 
 测试 django 是否正常，运行：
django-admin.py startproject demosite
cd demosite
python2.7 manage.py runserver 0.0.0.0:8002
在浏览器内输入：http://127.0.0.1:8002，检查django是否运行正常。
 
/usr/local/bin/pip2.7  install MySQL-python
 yum install MySQL-python
 
   raise ImproperlyConfigured("Error loading either pysqlite2 or sqlite3 modules (tried in that order): %s" % exc)
django.core.exceptions.ImproperlyConfigured: Error loading either pysqlite2 or sqlite3 modules (tried in that order): No module named _sqlite3

ImportError: No module named _sqlite3

 http://ju.outofmemory.cn/entry/97658
 http://hunt1574.blog.51cto.com/1390776/1630974
 
 cp  /usr/lib64/python2.6/lib-dynload/_sqlite3.so   /usr/local/lib/python2.7/lib-dynload/
 
 直接配置为mysql就行了啦 
 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'django',                      # Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '3306',                      # Set to empty string for default.
    }
}
 
 


==uwsgi 配置==

vi /etc/uwsgi9090.ini
[root@rpmbuild demosite]# cat /etc/uwsgi9090.ini 
[uwsgi]
socket = 127.0.0.1:9090
master = true         //主进程
vhost = true          //多站模式
no-site = true        //多站模式时不设置入口模块和文件
workers = 2           //子进程数
reload-mercy = 10     
vacuum = true         //退出、重启时清理文件
max-requests = 1000   
limit-as = 512
buffer-size = 30000
pidfile = /var/run/uwsgi9090.pid    
daemonize = /data/logs/uwsgi9090.log

uwsgi --ini /etc/uwsgi9090.ini &

可以起来了，以后改一下怎么写成启动脚本 yum 已带了 
可能写log 什么的要改权限吧 














==Nginx 配置==

#搞不明白这个 路径呀 
server {
        listen       80;
        server_name  localhost;
        
        location / {            
            include  uwsgi_params;
            uwsgi_pass  127.0.0.1:9090;              //必须和uwsgi中的设置一致
            uwsgi_param UWSGI_SCRIPT demosite.wsgi;  //入口文件，即wsgi.py相对于项目根目录的位置，“.”相当于一层目录
            uwsgi_param UWSGI_CHDIR /demosite;       //项目根目录
            index  index.html index.htm;
            client_max_body_size 35m;
        }
    }
    
    
nginx: [emerg] unknown directive "//必须和uwsgi中的设置一致" in /etc/nginx/conf.d/dj.conf:8

我去掉注释并yum 一个 居然就好了，等 下再试一下我的ops_nginx   是不是我打包时没有加载 uwsgw  


我自己手工编译一个nignx 

nginx/sbin/nginx
    
    
打开如此 
Internal Server Error    
    
    
    
yum  install uwsgi
#这个有启动脚本的 可拿出来用 

这个是配置文件 
/etc/uwsgi.ini
    
    
    
    
设置完成后，在终端运行：
#不然启动不起来呢 
touch /var/run/uwsgi9090.pid 
uwsgi --ini /etc/uwsgi9090.ini &
/usr/local/nginx/sbin/nginx
在浏览器输入：http://127.0.0.1，你就可以看到 django 的 "It work" 了。    
    




##good 
http://blog.csdn.net/huanbia/article/details/54630180

/home/evan/python/django/uwsginote

uwsgi --http :8002 --wsgi-file test.py


uwsgi --http :8008 --chdir /root/demosite/demosite --wsgi-file demosite/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9192


echo >/tmp/crontab_op_retain_log.txt
echo >/tmp/crontab_retain_day_new_log.txt
echo >



tail /var/log/uwsgi.log
chdir(): Permission denied [core/uwsgi.c line 1590]
unlink(): No such file or directory [core/uwsgi.c line 1636]


在nginx的配置文件里加入了include uwsgi的配置项，结果提示：

nginx: [emerg] unknown directive "uwsgi_param" in /usr/local/nginx/conf/uwsgi_params:2
修改amh的安装脚本把--without-http_uwsgi_module 删掉



#20170420

*********************************

How to use Django with uWSGI
https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/uwsgi/


==Uwsgi的安装==

uwsgi 实际上也是一个 http 服务器，只不过它只面向 python 网络应用程序。虽然 uwsgi 也是 http 服务器，但是却不能直接使用它部署 python web 应用程序，否则会出错。
Uwsgi的安装比较简单，推荐使用#yum install Uwsgi直接下载使用，而不推荐用#pip install uwsgi

yum  install uwsgi
#这个有启动脚本的 可拿出来用 

这个是配置文件 
/etc/uwsgi.ini


sudo apt install uwsgi


yum install uwsgi-plugin-python

uwsgi --plugin python --http-socket :8001 --wsgi-file logan.py


http://chenx1242.blog.51cto.com/10430133/1904804
参考资料：http://xiaorui.cc/2017/02/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3uwsgi%E5%92%8Cgunicorn%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8A/

http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html


==Uwsgi与Django配合 ==

#这个应该不用理，直接pass 

http://chenx1242.blog.51cto.com/10430133/1906056

django-admin.py startproject logan，建立了一个叫logan的project，然后在  logan/logan里会有一个自动生成的wsgi.py，打开一看，里面的内容如下：



uwsgi --plugin python --http-socket :8001 --chdir ./django/logan/ --wsgi-file ./django/logan/logan/wsgi.py



==Nginx与django+uwsgi 搭建（上）==


uwsgi --version
2.0.14-debian

sudo apt install nginx

然后我们#cp /etc/nginx/uwsgi_params . /django/logan，这样目的是把uwsgi_params复制到我们的project文件夹里。然后在project里，我们创建一个nginx的配置文件，起名叫：mysite_nginx.conf，同时给这个conf文件755的权限，整个mysite_nginx.conf的内容如下：

 vim  /etc/nginx/sites-enabled/mysite_nginx.conf

events {
  worker_connections  1024;  ## Default: 1024
}
http{
upstream django {
    server 127.0.0.1:8001;    #用uwsgi启动的django是在8001端口
}
server {
    listen      8000;
    server_name 这里填写你的外网地址或者域名;
    charset     utf-8;
    client_max_body_size 75M;
    location /media  {
        alias /home/evan/python/django/logan/media;    #设定mrdia的资源路径
    }
    location /static {
        alias /home/evan/python/django/logan/static;    #设定static的资源路径
    }
    location / {
        uwsgi_pass  django;
        include     /home/evan/python/django/logan/uwsgi_params;    #我们刚写的uwsgi_params的地址
    }
}
}




--without-http_uwsgi_module 删掉

在nginx的配置文件里加入了include uwsgi的配置项，结果提示：

nginx: [emerg] unknown directive "uwsgi_param" in /usr/local/nginx/conf/uwsgi_params:2






0. 记录Uwsgi与Django成功勾搭的始末
http://chenx1242.blog.51cto.com/10430133/1906056



http://www.ziqiangxuetang.com/django/django-tutorial.html


How To Serve Django Applications with uWSGI and Nginx on Ubuntu 16.04
https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04



Centos升级Python 2.7.12并安装最新pip
https://blog.fazero.me/2016/10/13/centos-update-python/

Python/WSGI 应用快速入门
http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html


