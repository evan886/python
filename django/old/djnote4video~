==01.Django的安 ==

settings.py

TIME_ZONE='Asia/Shanghai' 
LANGUAGE_COOD='zh-cn'



INSTLLED_APPS

'blog',

urls.py

url(r'^blog/index/$','blog.views.index'),

django startproject csvt
django startapp blog  # INSTLLED_APPS 里面的对应 上

 
vim blog/views.py

from django.http import HttpResponse
def index(req):
    return HttpResponse('<h1>hellow welcome </h1>')

python manage.py runserver 


127.0.0.1:8000/blog/index/




02. 模板加载 

bluefish 

blog/templates/index.html

vim blog/views.py

from django.http import HttpResponse
from django.template import loader, Context
def index(req):
    t = loader,get_template('index.html')
    c = Context({}) 
    return HttpResponse(t.render(c))
    return HttpResponse('<h1>hellow welcome </h1>')



#升级 
vim blog/views.py

from django.http import HttpResponse
from django.template import loader, Context
from django.shortcuts import render_to_response
’‘’
def index(req):
    t = loader,get_template('index.html')
    c = Context({}) 
    return HttpResponse(t.render(c))
    return HttpResponse('<h1>hellow welcome </h1>')
‘’‘

def index(req):
    return render_to_response('index.html',{})


==03. 模板变量==
06 min

模板变量 ： {} 括起来的

blog/templates/index.html
<title > {title}</title>

<h1> hello {user}</h1>


vim blog/views.py

from django.http import HttpResponse
from django.template import loader, Context
from django.shortcuts import render_to_response
#变量定义
def index(req):
    return render_to_response('index.html',{'title': my blog, 'user':evan})




#改进版本1
vim blog/views.py

from django.http import HttpResponse
from django.template import loader, Context
from django.shortcuts import render_to_response
#变量定义
def index(req):
    user = {'name':'tom', 'age':23, 'sex':'male'}
    return render_to_response('index.html',{'title':'my page','user':user)

#拿出字典中的数据 
vim blog/templates/index.html
<title > {title}</title>

<h1> hello {user.name}</h1>
<li> age : {user.age}</li>


localhost:8900/blog/index/



#改进版本2 使用对象 
vim blog/views.py

from django.http import HttpResponse
from django.template import loader, Context
from django.shortcuts import render_to_response

class Person(object):
    def __init__(self,name,age,sex):
    self.name = name
    self.age = age
    self.sex = sex
#变量定义
def index(req):
    #user = {'name':'tom', 'age':23, 'sex':'male'}
    user = Person('max',33,'male')
    book_list = [ 'python','java','php','web']
    return render_to_response('index.html',{'title':'my page','user':user,'book_lisst':book_list)

#拿出字典中的数据 
vim blog/templates/index.html
<title > {title}</title>

<h1> hello {user.name}</h1>
<li> age : {user.age}</li>
<li>sex :{{user.sex}} </li>

{{book_list}}
{{book_list.0}}
{{book_list.1}}
{{book_list.2}}
{{book_list.3}}
</body>


localhost:8900/blog/index/


#3
#改进版本3 使用对象 
vim blog/views.py

from django.http import HttpResponse
from django.template import loader, Context
from django.shortcuts import render_to_response

class Person(object):
    def __init__(self,name,age,sex):
    self.name = name
    self.age = age
    self.sex = sex
    def say(self);
        return  "I am " + self.name
#变量定义
def index(req):
    #user = {'name':'tom', 'age':23, 'sex':'male'}
    user = Person('max',33,'male')
    book_list = [ 'python','java','php','web']
    return render_to_response('index.html',{'title':'my page','user':user,'book_lisst':book_list)

#拿出字典中的数据 
vim blog/templates/index.html
<title > {title}</title>

<h1> hello {user.name}</h1>
<li> age : {user.age}</li>
<li>sex :{{user.sex}} </li>

<div> the  {{user.name}} say : {{user.say}}  </li>

{{book_list}}
{{book_list.0}}
{{book_list.1}}
{{book_list.2}}
{{book_list.3}}
</body>


localhost:8900/blog/index/

== 04.Django模板标签之条件标签if和循环标签for   ==




== install uwsgi==

前几天 yum 的结果是不能和nignx 合作成功，而pip 又出错 ，其实直接源码就好了嘛  我那么笨 

wget -c https://projects.unbit.it/downloads/uwsgi-2.0.15.tar.gz
tar zxvf uwsgi-0.9.9.2.tar.gz
cd uwsgi-0.9.9.2
make -f Makefile.Py26 #指定你python的版本,如果你的python是2.7 就应该是 make -f Makefile.Py27
cp uwsgi /usr/sbin/uwsgi



Nginx+uWSGI部署Django 应用
http://www.oschina.net/question/54100_30386

https://uwsgi-docs.readthedocs.io/en/latest/Download.html


[[category:django]]

