
* =chapter 1=


1.1.1 num

id(); help(id); type()

>>> type(3)
<class 'int'>
>>> type(3.3)
<class 'float'>

1.1.2 var

1.1.4 big integer
In [10]: 7.8** -7.9
Out[10]: 8.962984363005433e-08

1.1.5 float



** 1.2 除法

** 1.5 str
+ 连接str

1.5.6 原始str     r 以前的那本就有哈哈  以前看了一些 又不记得了 可惜了 不过现在记得一些

*** 1.5.8 str基本操作
+ 连接 

in 判断元素是否在序列中

判断大小 和大学的C一样啦
In [23]: ord('a')
Out[23]: 97

In [24]: ord('b')
Out[24]: 98

In [25]: "a"  > "b"
Out[25]: False


"*" 重复
len 长度

***  1.5.9 字符串格式化输出 

In [1]: "I like {0} and {1}".format("xi","mei")
Out[1]: 'I like xi and mei'



*** 1.5.10 常用的字符串方法

**** isalpha()

**** split
In [5]: name ="i love you"
In [7]: name.split(" ")
Out[7]: ['i', 'love', 'you']

**** 去掉空格
S.strip() 左右空格
S.lstrip() 
S.rstrip()

**** 大小写转换

In [8]: a= "i love you mei"

In [9]: b=a.upper()

In [10]: b
Out[10]: 'I LOVE YOU MEI'


In [11]: c=b.lower()

In [12]: c
Out[12]: 'i love you mei'

In [13]: a.capitalize()
Out[13]: 'I love you mei'



**** 5 join()

In [14]: b='www.linuxsa.org'

In [15]: c=b.split(".")

In [16]: ".".join(c)
Out[16]: 'www.linuxsa.org'

In [17]: c
Out[17]: ['www', 'linuxsa', 'org']


** 1.6 字符编码 


*** ===1.6.3===

py2 
In [1]: import sys 
In [2]: sys.getdefaultencoding()
Out[2]: 'ascii'

py3
In [1]: import sys
In [2]: sys.getdefaultencoding()
Out[2]: 'utf-8'


** ==1.7 list==
[]

In [1]: a=['1','evan','xi']

In [2]: a
Out[2]: ['1', 'evan', 'xi']

In [3]: bool(a)
Out[3]: True

*** 1.7.2 索引和切片

n [10]: a = ['2',3,'qiwsit.github.io']

In [11]: a[0]
Out[11]: '2'

In [12]: a[1]
Out[12]: 3

In [13]: a[:2]
Out[13]: ['2', 3]

In [14]: a[1:]
Out[14]: [3, 'qiwsit.github.io']

In [15]: a[1:2]
Out[15]: [3]

In [16]: a[2]
Out[16]: 'qiwsit.github.io'

In [17]: a[2][3:4]   #a[2] 中的 [3:4]
Out[17]: 's'

In [18]: a[2][7:13]
Out[18]: 'github'

-

In [19]: lang = "python"

In [20]: lang[-1]
Out[20]: 'n'

In [21]: lst = ['python','java','c++']

In [22]: lst[-1]
Out[22]: 'c++'

In [23]: lang[-1:-3]
Out[23]: ''

lang[-1:-3] ===  lang[(6-1):(6-3)] = lang[5:3]
 序列都是从左向右读取  这里却是 反过来 所以 为空 

In [23]: lang[-1:-3]
Out[23]: ''

***  ===1.7.3===
reversed 

Out[2]: ['1', 'evan', 'xi']

In [3]: bool(a)
Out[3]: True

In [4]: a[::-1]
Out[4]: ['xi', 'evan', '1']

In [5]: list(reversed(a))
Out[5]: ['xi', 'evan', '1']

*** list 操作
len(),+,in,max min etc 

修改列表元素

In [8]: a[1]
Out[8]: 'evan'

In [9]: a[1]="evanlai"

In [10]: a[1]
Out[10]: 'evanlai'

In [11]: a.append("ximei")

In [12]: a
Out[12]: ['1', 'evanlai', 'xi', 'ximei']



In [6]: len(a)
Out[6]: 3

In [7]: a+a
Out[7]: ['1', 'evan', 'xi', '1', 'evan', 'xi']


*** ==1.7.5==

hasattr() 有没有 iter 

In [1]: new = [1,2,3]

In [2]: lst = ['py','php']

In [3]: r= lst.extend(new)

In [4]: r

#没有返回值的方法，就不要使用赋值语句了 用也白用 :
In [5]: print(r)
None

In [6]: print (r)
None

要有输出 如下 
In [22]: lst.extend(new)
In [23]: lst
Out[23]: ['py', 'php', 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]


apend()  extend()


count  

In [25]: lst
Out[25]: ['py', 'php', 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
In [26]: lst.count('1')
Out[26]: 0
In [27]: lst.count(1)
Out[27]: 5

index 


insert 

In [30]: a.insert(0,'x')
In [31]: a
Out[31]: ['x', '1', 'evanlai', 'xi', 'ximei']

In [2]: a=['I','love','you']

In [3]: a
Out[3]: ['I', 'love', 'you']

In [4]: a.remove("I")

In [5]: a
Out[5]: ['love', 'you']

In [6]: a.pop()
Out[6]: 'you'

In [7]: a
Out[7]: ['love']

In [9]: a=['I','love','you','mei']

In [10]: a.reverse
Out[10]: <function list.reverse()>

In [11]: a
Out[11]: ['I', 'love', 'you', 'mei']

In [12]: a.reverse()

In [13]: a
Out[13]: ['mei', 'you', 'love', 'I']

2021年 5月10日 星期一

>>> a=[6,1,5,3]
>>> a.sort()
>>> a
[1, 3, 5, 6]
>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

*** 1.7.6 比较列表和字符串

*** 两者转化
    str.split()
>> line="hello, I love you"
>>> line.split(",")
['hello', ' I love you']

"[sep]".join(list)  是str的方法，不是list的方法 
 和上面相反 list 变str
>>> name=['us','uk']
>>> ".".join(name)
'us.uk'

>>> " ".join(name)
'us uk'


** 1.8 tuple

In [1]: t=123,'evan',["love","you"]

In [2]: t
Out[2]: (123, 'evan', ['love', 'you'])

In [3]: type(t)
Out[3]: tuple

In [4]: s="evan"

In [5]: s
Out[5]: 'evan'

In [6]: type(s)
Out[6]: str


*** 1.8.2  索引和切片   

In [7]: t=(1,'23',[123,'abc'],('python'),'evan')

In [8]: t[2]
Out[8]: [123, 'abc']

In [9]: t[1:]
Out[9]: ('23', [123, 'abc'], 'python', 'evan')

In [10]: t[2][1]
Out[10]: 'abc'


Note 当元组中只有一个元素时,元素后面要加, 不然是int  


** 1.9 dict

*** 创建字典 
mydict={}



In [1]: name=(["1","google"],["2","bing"])

In [2]: type(name)
Out[2]: tuple

In [3]: website=dict(name)

In [4]: website
Out[4]: {'1': 'google', '2': 'bing'}

In [5]: type(website)
Out[5]: dict

*** 1.9.2 访问字典的值

In [1]: person={'name2': 'mei','name':'evan','language':'py','site':'linuxsa.org'}

In [2]: person['name']
Out[2]: 'evan'


*** 基本操作

In [3]: city_code={'suzhou':'0512','beijin':'011','shanghai':'012','tangshan':'0315'}

In [4]: city_code
Out[4]: {'suzhou': '0512', 'beijin': '011', 'shanghai': '012', 'tangshan': '0315'}

In [5]: city_code['beijin']="010"

In [6]: city_code
Out[6]: {'suzhou': '0512', 'beijin': '010', 'shanghai': '012', 'tangshan': '0315'}


In [9]: city_code
Out[9]: 
{'suzhou': '0512',
 'beijin': '010',
 'shanghai': '012',
 'tangshan': '0315',
 'nanjing': '025'}

In [10]: del city_code["shanghai"]

In [11]: city_code
Out[11]: {'suzhou': '0512', 'beijin': '010', 'tangshan': '0315', 'nanjing': '025'}


in 

In [12]: shanghai in city_code
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-12-bd1f040640ee> in <module>
----> 1 shanghai in city_code

NameError: name 'shanghai' is not defined

In [13]: "shanghai" in city_code
Out[13]: False


***  字符串格式化输出 

In [14]: "suzhou is a  beautiful city, its area cdode is {suzhou}".format(**city_code)
Out[14]: 'suzhou is a  beautiful city, its area cdode is 0512'


*** 1.9.5 字典的方法

1.copy 

In [15]: ad={"name":"evan","lang":"python"}

In [16]: bd=ad

In [17]: bd
Out[17]: {'name': 'evan', 'lang': 'python'}

In [18]: id(ad)
Out[18]: 139725632610816

In [19]: id(bd)
Out[19]: 139725632610816


In [20]: cd =ad.copy()

In [21]: cd
Out[21]: {'name': 'evan', 'lang': 'python'}

In [22]: id(cd)
Out[22]: 139725632878336


In [23]: cd["name"]="linuxsa.org"

In [24]: cd
Out[24]: {'name': 'linuxsa.org', 'lang': 'python'}

In [25]: ad
Out[25]: {'name': 'evan', 'lang': 'python'}


In [26]: bd
Out[26]: {'name': 'evan', 'lang': 'python'}

In [27]: bd["name"]="mei"

In [28]: ad
Out[28]: {'name': 'mei', 'lang': 'python'}

In [29]: bd
Out[29]: {'name': 'mei', 'lang': 'python'}

bd=ad 得到是引用同一个对象


In [30]: x={"name":"qi","lang":["py","java","c"]}

In [31]: y=x.copy()

In [32]: y
Out[32]: {'name': 'qi', 'lang': ['py', 'java', 'c']}

In [33]: id(x)
Out[33]: 139725630257984

In [34]: id(y)
Out[34]: 139725631495744


删除 y 影响了x呀 

In [35]: y["lang"].remove("c")

In [36]: y
Out[36]: {'name': 'qi', 'lang': ['py', 'java']}

In [37]: x
Out[37]: {'name': 'qi', 'lang': ['py', 'java']}



但是改变name 又不影响哦 
In [38]: y["name"]="laoqi"

In [39]: y
Out[39]: {'name': 'laoqi', 'lang': ['py', 'java']}

In [40]: x
Out[40]: {'name': 'qi', 'lang': ['py', 'java']}

原因  
可见 列表是同一个对象 , 另外一个str 不是  同一个对象 

一般是列表这些str num 复合而成的是复制了引用 
In [41]: id(x["lang"])
Out[41]: 139725629544448

In [42]: id(y["lang"])
Out[42]: 139725629544448

In [43]: 

In [43]: id(x["name"])
Out[43]: 139725630511472



deep copy  解决这个可能是引用的问题 
import coy 
z=copy.deepcopy(x)

In [44]: id(y["name"])
Out[44]: 139725630720176



不错 坚持看完了copy  后面的理解部分

2. clear 

In [9]: a={"name":"mei"}
In [10]: a.clear()
In [11]: a
Out[11]: {}

get and setdefault


In [12]: d={'lang':'py'}

In [16]: d.get('lang')
Out[16]: 'py'

有一个会报错的 

In [17]: d.get('name')

In [18]: 

In [18]: d["name"]
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-18-3dc752b20a59> in <module>
----> 1 d["name"]

KeyError: 'name'



In [19]: d
Out[19]: {'lang': 'py'}

In [20]: d.setdefault("lang")
Out[20]: 'py'

In [21]: d.setdefault("name","evan")
Out[21]: 'evan'

In [22]: d
Out[22]: {'lang': 'py', 'name': 'evan'}



4.items, keys,values 

以列表的形式返回

In [23]: d
Out[23]: {'lang': 'py', 'name': 'evan'}

In [24]: dd_kv=d.items()

In [25]: dd_kv
Out[25]: dict_items([('lang', 'py'), ('name', 'evan')])



5. pop and pipitem 
In [26]: d
Out[26]: {'lang': 'py', 'name': 'evan'}

In [27]: d.pop("name")
Out[27]: 'evan'

In [28]: d
Out[28]: {'lang': 'py'}

In [29]: d.pop("name")
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-29-634abdd9f6a4> in <module>
----> 1 d.pop("name")

KeyError: 'name'

删除不存在的会报错 

popitem 是随机删除 

6.update 

In [30]: d
Out[30]: {'lang': 'py'}

In [31]: d2={"song":"I love you"}

In [32]: d.update(d2)

In [33]: d
Out[33]: {'lang': 'py', 'song': 'I love you'}

In [34]: d2
Out[34]: {'song': 'I love you'}

** 1.10 集合 set  

*** 1.10.1 create  set 

In [35]: s1=set("ximei")

In [36]: s1
Out[36]: {'e', 'i', 'm', 'x'}



set() 创建的集合是可变集合,可变集合都是 unhashable 

*** 1.10.2  set 的办法 

In [37]: dir(set)
Out[37]: 

'add',
 'clear',
 'copy',
 'difference',
 'difference_update',
 'discard',
 'intersection',
 'intersection_update',
 'isdisjoint',
 'issubset',
 'issuperset',
 'pop',
 'remove',
 'symmetric_difference',
 'symmetric_difference_update',
 'union',
 'update']


1.add and update 

In [38]: s=set()

In [39]: s={'a','i'}

In [40]: s.add("evan")

In [41]: s
Out[41]: {'a', 'evan', 'i'}


In [42]: s2=set(['linuxsa','evanlai'])

In [43]: s
Out[43]: {'a', 'evan', 'i'}

In [44]: s.update(s2)

In [45]: s
Out[45]: {'a', 'evan', 'evanlai', 'i', 'linuxsa'}



2. pop,remove,discard,clear

clear 全删除 

*** 1.10.3 不变的集合

In [47]: f=frozenset("evan")

In [48]: f
Out[48]: frozenset({'a', 'e', 'n', 'v'})



*** 集合的运算

In [49]: s
Out[49]: {'a', 'evan', 'evanlai', 'i', 'linuxsa'}

In [50]: "a" in s
Out[50]: True

In [51]: b=set(['a','b'])

In [52]: a == b
Out[52]: False

In [53]: a !=b
Out[53]: True


有点高中数学的感觉呀 有意思 


* chapter 2  语句和文件  

** 2.1 运算符

*** 2.1.3 逻辑运算符
In [54]: a=" "

In [55]: bool(a)
Out[55]: True

In [56]: b=""

In [57]: bool(b)
Out[57]: False

** 简单语句 

import 
In [58]: import math

In [59]: pow(3,2)
Out[59]: 9

***  赋值语句 

这是一个比较6的例子
In [64]: x,y,z =1,"evan",['xi','mei']

In [65]: x
Out[65]: 1

In [66]: y
Out[66]: 'evan'

In [67]: z
Out[67]: ['xi', 'mei']


** 2.3 条件语句 

*** if
In [68]: a =6

In [69]: if a == 6:
    ...:     print(a)
    ...: 
6


*** if ... elfi ... else 
evan@myxps:~/github/python/learn-python/laoqi/eg$ python3  egif.py
请输入一个整数数字
9
你输入的数字是9
this number is  less than 10
evan@myxps:~/github/python/learn-python/laoqi/eg$ python3  egif.py
请输入一个整数数字
11
你输入的数字是:11
this number is more than 10.
evan@myxps:~/github/python/learn-python/laoqi/eg$ cat egif.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
print("请输入一个整数数字")
number = int(input())
if number == 10:
    print("你输入的数字是{}".format(number))
    print("YOU ARE SMART")

elif  number > 10:
    print("你输入的数字是:{}".format(number))
    print("this number is more than 10.")

else:
    print("你输入的数字是{}".format(number))
    print("this number is  less than 10")


三元
In [70]: x=2

In [71]: y=9

In [72]: a="python" if x > y else "evan"

In [73]: a
Out[73]: 'evan'


** 2.4 for 

In [74]: hello = "world"

In [75]: for i in hello:
    ...:     print(i)
    ...: 
w
o
r
l
d


dict 最好就是
for k in d.keys(:)
    print(k)

In [77]: import collections


In [79]: isinstance(123,collections.Iterable)
<ipython-input-79-d3effd603662>:1: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
  isinstance(123,collections.Iterable)
Out[79]: False

可得 要用for must be  iterable  
so str ,  list  ,dict ,tuple,set  可以 ,而int 不行 

*** 2.4.3 range

In [80]: list(range(0,9,2))
Out[80]: [0, 2, 4, 6, 8]


小于100 能被3整除的正整数

 python3   quot.py
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]
evan@myxps:~/github/python/learn-python/laoqi/eg$ cat quot.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
aliquot = []
for n in range(1,100):
    if n % 3 == 0:
        aliquot.append(n)
print(aliquot)


or 
In [80]: list(range(0,9,2))
Out[80]: [0, 2, 4, 6, 8]

In [81]: list(range(3,100,3))
Out[81]: 
[3,
 6,
 9,


*** 2.4.4 并列迭代 

In [82]: a=[1,2,3,4]

In [83]: b=[9,8,7,6]

In [84]: c=[]

In [85]: for i in range(len(a)):
    ...:     c.append(a[i]+b[i])
    ...: 

In [86]: c
Out[86]: [10, 10, 10, 10]

更加好的办法二 

In [89]: list(zip(a,b))
Out[89]: [(1, 9), (2, 8), (3, 7), (4, 6)]


so 

n [90]: d=[]

In [91]: for x, y in zip(a,b):
    ...:     d.append(x + y)
    ...: 

In [92]: d
Out[92]: [10, 10, 10, 10]

*** 2.4.5 enumerate

In [1]: week=['monday','sunday','friday']

In [2]: for (i,day) in enumerate(week):
   ...:     print(day + 'is' + str(i))
   ...: 
mondayis0
sundayis1
fridayis2


不然只能是 

In [4]: for i in range(len(week)):
   ...:     print(week[i] + 'is' + str(i))
   ...: 
mondayis0
sundayis1
fridayis2


In [5]: seasons=['spring','summer','fall','winter']

In [6]: list(enumerate(seasons))
Out[6]: [(0, 'spring'), (1, 'summer'), (2, 'fall'), (3, 'winter')]



In [7]: raw="DO Canglaoshi? canglaoshi is a good man"

In [8]: raw_lst=raw.split()

In [9]: raw_lst
Out[9]: ['DO', 'Canglaoshi?', 'canglaoshi', 'is', 'a', 'good', 'man']

In [10]: for i,string in enumerate(raw_lst):
    ...:     if "Canglaoshi" in string:
    ...:         raw_lst="PYTHON"
    ...: 

In [11]: raw_lst
Out[11]: 'PYTHON'


In [19]: raw="DO Canglaoshi? Canglaoshi is a good man"

In [20]: raw_lst=raw.split()

In [21]: raw_lst
Out[21]: ['DO', 'Canglaoshi?', 'Canglaoshi', 'is', 'a', 'good', 'man']

In [22]: for i,string in enumerate(raw_lst):
    ...:     if "Canglaoshi" in string:
    ...:         raw_lst[i]="PYTHON"
    ...: 
    ...: 

In [23]: raw_lst
Out[23]: ['DO', 'PYTHON', 'PYTHON', 'is', 'a', 'good', 'man']



*** 列表解析 

In [24]: squares = [x**2 for x in range(1,10)]

In [25]: squares
Out[25]: [1, 4, 9, 16, 25, 36, 49, 64, 81]



** 2.5 while  

*** 2.5.2 break and continue

*** 2.5.3 while ... else

*** 2.5.4 for ... else 

** 文件 

evan@myxps:~/github/python/learn-python/laoqi/eg$ cat quot.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
aliquot = []
for n in range(1,100):
    if n % 3 == 0:
        aliquot.append(n)
print(aliquot)
evan@myxps:~/github/python/learn-python/laoqi/eg$ ipython3
Python 3.8.5 (default, Aug  2 2020, 15:09:07) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.18.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: f=open("quot.py")

In [2]: for line in f:
   ...:     print(line)
   ...: 
#!/usr/bin/python3

# -*- coding: utf-8 -*-

aliquot = []

for n in range(1,100):

    if n % 3 == 0:

        aliquot.append(n)

print(aliquot)



*** 2.6.2 创建文件 

In [3]: nf=open("file.txt","w")

In [4]: nf.write("this is a new file")
Out[4]: 18

In [5]: nf.close()

In [6]: cat file.txt
this is a new file

*** 2.6.3 use with 
可不用close 
In [9]: with open("file.txt","a") as f:
   ...:     f.write("\n I am s pythoner")
   ...: 

In [10]: cat file.txt
this is a new file
 I am s pythoner


*** 2.6.4 文件的状态

In [11]: import os , time

In [12]: file_stat= os.stat("file.txt")

In [13]: file_stat
Out[13]: os.stat_result(st_mode=33188, st_ino=4857995, st_dev=66312, st_nlink=1, st_uid=1000, st_gid=1000, st_size=35, st_atime=1620800783, st_mtime=1620800779, st_ctime=1620800779)

In [14]: time.localtime(file_stat.st_ctime)
Out[14]: time.struct_time(tm_year=2021, tm_mon=5, tm_mday=12, tm_hour=14, tm_min=26, tm_sec=19, tm_wday=2, tm_yday=132, tm_isdst=0)

In [15]: 


*** 2.6.5  read/readline/readlines 

*** 2.6.6 大文件 

import fileinput
for line in fileinput.input("bigfile"):
    print(line,end='')

*** 2.6.7 seek 

In [18]: f.read()
Out[18]: 'w file\n I am s pythoner'

In [19]: f.tell()
Out[19]: 35

In [20]: f.seek(0)
Out[20]: 0

In [21]: f.readline()
Out[21]: 'this is a new file\n
和c 是一样的啦 

** 2.7 初识迭代 

iterate 按某种顺序zhu个访问对象中的每一项 

In [22]: lst=['1','2','3','4']

In [24]: for i in lst:
    ...:     print(i,end='')
    ...: 
1234

234
In [25]: lst_iter=iter(lst)

In [26]: lst_iter.__next__
Out[26]: <method-wrapper '__next__' of list_iterator object at 0x7f5357f15fa0>

In [27]: lst_iter.__next__()
Out[27]: '1'

In [28]: lst_iter.__next__()
Out[28]: '2'

In [29]: lst_iter.__next__()
Out[29]: '3'

In [34]: while True:
    ...:     print(lst_iter.__next__())
    ...: 
1
2
3
4
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
<ipython-input-34-a56131841699> in <module>
      1 while True:
----> 2     print(lst_iter.__next__())
      3 

StopIteration: 

可能报错呢 

*** 2.7.2 文件迭代器 

In [37]: f=open("file.txt")

In [38]: f.__next__()
Out[38]: 'this is a new file\n'

In [39]: f.__next__()
Out[39]: ' I am s pythoner'


可以直接用__next__ 那就不用iter()转换啦 

* chapter 3  function 

** 3.1 

*** 定义function 

*** 3.1.4 调用function 

In [1]: def times(x,y=2):
   ...:     print("x={}".format(x))
   ...:     print("y=",y)
   ...:     return x * y
   ...: 

In [2]: times(x=3)
x=3
y= 2
Out[2]: 6

In [3]: times(3,4)
x=3
y= 4
Out[3]: 12

In [4]: times("evan")
x=evan
y= 2
Out[4]: 'evanevan'


** 深入探究func 

*** 返回值
任一个数都是前数之和的数字列表 

#!/usr/bin/python3
# -*- coding: utf-8 -*-
def fibs(n):
    result = [0,1]
    for i in range(n-2):
        result.append(result[-2] + result[-1])
    return result
if __name__ == "__main__":
    lst = fibs(4)
    print(lst)



*** 3.2.2 func中的文档 
''' doc here '''

*** func的属性 

***  参数和变量 

func参数传的是对象引用 
如下 

In [1]: def foo(lst):
   ...:     lst.append(99)
   ...:     return lst
   ...: 

In [2]: x =[1,3,5]

In [3]: y=foo(x)

In [4]: x
Out[4]: [1, 3, 5, 99]

In [5]: y
Out[5]: [1, 3, 5, 99]

In [6]: id(x)
Out[6]: 140692691548352

In [7]: id(y)
Out[7]: 140692691548352


***  参数收集


*args  元组形式
**kargs  dict 形式 


**  func对象 

*** 3.3.1 递归 

***  传递func 

In [1]: def  bar():
   ...:     print("I am in bar()")
   ...: 
In [2]: bar
Out[2]: <function __main__.bar()>
In [3]: bar()
I am in bar()
传递的是func 

In [6]: foo(bar)
I am in bar()

***  嵌套func 

 cat   p165.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
def foo():
    a =1
    def bar():
        b = a +1
        print("b=",b)
    bar()
    print("a=",a)
foo()

''' b= 2
a= 1
'''

#!/usr/bin/python3
# -*- coding: utf-8 -*-
def foo():
    a =1
    def bar():
        nonlocal a 
        a = a +1
        print("bar()a=",a)
    bar()
    print("foo()a=",a)
foo()

''' 
bar()a= 2
foo()a= 2

'''


 cat gmg.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
def weight(g):
    def cal_mg(m):
        return m * g
    return cal_mg
w = weight(10)
print("w=",w)
mg = w(10)
print("mg=",mg)

g0=9.78046
w0=weight(g0)
mg0=w0(10)
print(mg0)
'''
w= <function weight.<locals>.cal_mg at 0x7f1f2b538e50>
mg= 100

97.8046

所说说run w=weight(10) ,w所引用的是一个func对象(cal_mg) ,而w(10) 则是所引用的func对象cal_mg 传递了一个参数10 也就是m =10, 和原来的g=10 ,算出m*g 并返回结果
不用每次传递两个参数呀


'''

*** 3.3.4 初衷头饰器 

*** 3.3.5 闭包 回头再看吧 p168







** 3.4 特殊函数 

*** lambda
In [1]: lam=lambda x: x+3                                                        

In [2]: n2=[] 
In [4]: numbers = range(10)                                                      

In [5]: for i in numbers: 
   ...:     n2.append(lam(i)) 
   ...:                                                                          

In [6]: n2                                                                       
Out[6]: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]


*** 3.4.2 map 

In [17]: lst1=[1,2,3]                                                            

In [18]: lst2=[6,7,8]                                                            

In [19]: list(map(lambda x,y:x + y,lst1,lst2))                                   
Out[19]: [7, 9, 11]


*** 3.5.3 reduce 




闭包先不不看 p168

前进 后退 up or donw 什么的和emacs一样的呀 



 
    






In [1]: from functools import reduce                                                                                                                                         

In [2]: reduce(lambda x,y: x+y,[1,2,3,4,5])                                                                                                                                  
Out[2]: 15

加起来 

In [3]: lis1=[1,2,3]                                                                                                                                                         

In [4]: lis2=[6,5,4]                                                                                                                                                         

In [5]: map(lambda x,y: lis1,lis2)                                                                                                                                           
Out[5]: <map at 0x7f557a93bdf0>

In [8]: list(map(lambda x,y:x+y, lis1,lis2))                                                                                                                                 
Out[8]: [7, 7, 7]


可见  map 上下计算 ,reduce 横着元素计算

*** 3.4.4 filter 
n [9]: numbers = range(-5,5)                                                                                                                                                

In [10]: list(filter(lambda x: x>0,numbers))                                                                                                                                 
Out[10]: [1, 2, 3, 4]

In [11]: [x for x in numbers if x>0 ]                                                                                                                                        
Out[11]: [1, 2, 3, 4]

In [12]: list(filter(lambda c: c!='e','evan'))                                                                                                                               
Out[12]: ['v', 'a', 'n']

*** 3.4.5 zip()补充

In [13]: colors=["red","green","blue"]                                                                                                                                       

In [14]: values=["234",12,89,65]                                                                                                                                             

In [15]: for col, val in zip(colors,values): 
    ...:     print((col,val)) 
    ...:                                                                                                                                                                     
('red', '234')
('green', 12)
('blue', 89)

zip 自动匹配还抛弃了不对应的项

2.参数*iterables

In [18]: dots =[(1,2),(3,4),(5,6)]                                                                                                                                           

In [19]: x,y = zip(*dots)                                                                                                                                                    

In [20]: x                                                                                                                                                                   
Out[20]: (1, 3, 5)

In [21]: y                                                                                                                                                                   
Out[21]: (2, 4, 6)

#矩阵转置
In [22]: list(zip(*dots))                                                                                                                                                    
Out[22]: [(1, 3, 5), (2, 4, 6)]


** 3.5命名空间
In [23]: import this                                                                                                                                                         
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit

* TODO chpater 4  classes 

*** 4.2.2 实例
self 就是实例对象本身 

** 4.3 属性和数据

In [1]: class A: 
   ...:     x = 7 
   ...:                                                                              

In [2]: A.x                                                                          
Out[2]: 7

In [3]: A.y = 9                                                                      

In [4]: A.y                                                                          
Out[4]: 9

*** 创建实例 

In [5]: class  Girl: 
   ...:     breast = 90 
   ...:                                                                              

In [6]: xi = Girl()                                                                  

In [7]: xi                                                                           
Out[7]: <__main__.Girl at 0x7f265a842ee0>


其实上节就是啦  

***  4.3.3 实例属性 

n [9]: foo = A()                                                                    

In [10]: foo.x                                                                       
Out[10]: 7


实例属性修改

In [12]: foo.x +=1                                                                   

In [13]: foo.x                                                                       
Out[13]: 8

In [14]: A.x                                                                         
Out[14]: 7
类属性还是 7 

注意  当类中的变量 引用是可变对象时 类属性和实例属性都能直接修改这个对象,从而影响另外一方的值

***  4.3.4 self 的作用 

类里面的任何方法 第一个参数都是self  

In [15]: class Person: 
    ...:     def __init__(self,name): 
    ...:         self.name = name  
    ...:         print(self) 
    ...:         print(type(self)) 
    ...:                                                                             

In [16]: girl = Person("xi")                                                         
<__main__.Person object at 0x7f265a8593a0>
<class '__main__.Person'>

可见 self就是类Person的实例,再来看盾 实例girl 

In [17]: girl                                                                        
Out[17]: <__main__.Person at 0x7f265a8593a0>

In [18]: type(girl)                                                                  
Out[18]: __main__.Person


self ande  girl 所引用的实例对象一样 


当创建实例的时候 实例变量作为第一个参数 ,被 py 解释器悄悄传给了self ,所以我们说在
初始化func中的self.name 就是实例的属性 

In [19]: girl.name                                                                   
Out[19]: 'xi'

这就是我们得到的实例属性 

*** 4.3.5 数据流转 

#!/usr/bin/python3
class Person:
    """
    This is a sample of class.
    """

    def __init__(self, name):
        self.name = name

    def get_name(self):
        return self.name

    def breast(self, n):
        self.breast = n

    def color(self, color):
        print("{0} is {1}".format(self.name, color))

    def how(self):
        print("{0} is {1}".format(self.name, self.breast))


if __name__ == "__main__":
    girl = Person("canglaoshi")
    girl.breast(90)

    girl.color("white")
    girl.how()
"""
python3  eg/person2.py
canglaoshi is white
canglaoshi is 90

"""


** 4.4 方法

*** 绑定方法和非绑定方法

以前的书也有 不过看了 没怎么用又不记得了 可惜 

In [1]: class Foo: 
   ...:     def bar(self): 
   ...:         print("this is a normal method of class") 
   ...:                                                                                                                                                                      

In [2]: f=Foo()                                                                                                                                                              

In [3]: f.bar()                                                                                                                                                              
this is a normal method of class


用实例调用这个方法的时候,因为 PY 解析器把实例已作为第一个参数隐式传给该方法,所以不用显式写出 self 参数了, 强调这个是为了理解self就是实例 


实例显式的传给方法 可用如下
In [6]: Foo.bar(f)                                                                                                                                                           
this is a normal method of class

err 如下 
---> 1 Foo.bar()

TypeError: bar() missing 1 required positional argument: 'self'



知识点来了 

In [7]: Foo.bar                                                                                                                                                              
Out[7]: <function __main__.Foo.bar(self)>

通过类的名字来调用方法对象的 这方法就叫非绑定方法unbound method 


In [8]: f.bar                                                                                                                                                                
Out[8]: <bound method Foo.bar of <__main__.Foo object at 0x7fd472a86220>>

用实例来得到这个方法对象 就是绑定方法bound method 

p197-198 有空再回看 

*** TODO 4.4.2 类方法和静态方法 
here 

** 4.5 继承 

*** 4.5.2 单继承

cat  person3.py 
#!/usr/bin/python3
class Person:
    def __init__(self, name):
        self.name = name

    def height(self, m):
        h = dict((["height", m],))
        return h

    def breast(self, n):
        b = dict((["breast", n],))
        return b


class Girl(Person):
    def get_name(self):
        return self.name


if __name__ == "__main__":
    xi = Girl("xime")
    print(xi.get_name)
    print(xi.get_name())
    print(xi.height(163))
    print(xi.breast(90))

"""
<bound method Girl.get_name of <__main__.Girl object at 0x7f77eedbe100>>
xime
{'height': 163}
{'breast': 90}


"""


* chapter 5 Errors and Exceptions
** 5.2 exceptions 
** 5.3 Handling Exceptions

#记得要先input  c 
python3  eg/try_exc.py 
this is a dvivsion program.
input 'c' continue, otherwise loguot:c
first num2
second no.2
1.0
**********************
this is a dvivsion program.
input 'c' continue, otherwise loguot:c
first num7
second no.0
This second num can't be zero
**************
this is a dvivsion program.
input 'c' continue, otherwise loguot:


 cat  try_exc.py
#!/usr/bin/python3
# -*- coding: utf-8 -*-
while 1:
    print("this is a dvivsion program.")
    c=input("input 'c' continue, otherwise loguot:")
    if c == 'c':
        a = input("first num")
        b=input("second no.")
        try:
            print(float(a)/float(b))
            print("**********************")
        except ZeroDivisionError:
            print("This second num can't be zero")
            print("**************")
    else:
        break


try...except 


python3  eg/calcu.py 
zero cat not be division.

 cat  calcu.py
#!/usr/bin/python3
# -*- coding: utf-8 -*-
class Calculator(object):
    #is_raise = False
    is_raise =True
    def calc(self,express):
        try:
            return eval(express)
        except ZeroDivisionError:
            if self.is_raise:
                return "zero cat not be division."
            else:
                raise
if __name__ == "__main__":
    c=Calculator()
    print(c.calc("8/0"))


2.处理多个异常



3. else 子句 

 python3 try_else.py 
firest  no.1
second no.4
0.25
evan@myxps:~/github/python/learn-python/laoqi/eg$ python3 try_else.py 
firest  no.2
second no.a
could not convert string to float: 'a'
try again
firest  no.4
second no.2
2.0

'

 cat try_else.py 
#!/usr/bin/python3
# -*- coding: utf-8 -*-
while 1:
        try:
            a=input("firest  no.")
            b=input("second no.")
            r=(float(a)/float(b))
            print(r)
        except Exception as e:
            print(e)
            print("try again")
        else:
            break


4. finally 

In [3]: x=10                                                                  

In [4]: try: 
   ...:     x=1/0 
   ...: except Exception as e: 
   ...:     print(e)     
   ...: finally: 
   ...:     print(e)     
   ...:     del x 
   ...:                                                                       
division by zero
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-4-c90b45b30120> in <module>
      4     print(e)
      5 finally:
----> 6     print(e)
      7     del x
      8 

NameError: name 'e' is not defined

总的来说 

try:
    do sth
except:
    do sth
else:
    do sth 
finally:
    do sth 

* chapter 6 Modules 



5.assert 
