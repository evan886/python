
* =chapter 1=


1.1.1 num

id(); help(id); type()

>>> type(3)
<class 'int'>
>>> type(3.3)
<class 'float'>

1.1.2 var

1.1.4 big integer
In [10]: 7.8** -7.9
Out[10]: 8.962984363005433e-08

1.1.5 float



** 1.2 除法

** 1.5 str
+ 连接str

1.5.6 原始str     r 以前的那本就有哈哈  以前看了一些 又不记得了 可惜了 不过现在记得一些

*** 1.5.8 str基本操作
+ 连接 

in 判断元素是否在序列中

判断大小 和大学的C一样啦
In [23]: ord('a')
Out[23]: 97

In [24]: ord('b')
Out[24]: 98

In [25]: "a"  > "b"
Out[25]: False


"*" 重复
len 长度

***  1.5.9 字符串格式化输出 

In [1]: "I like {0} and {1}".format("xi","mei")
Out[1]: 'I like xi and mei'



*** 1.5.10 常用的字符串方法

**** isalpha()

**** split
In [5]: name ="i love you"
In [7]: name.split(" ")
Out[7]: ['i', 'love', 'you']

**** 去掉空格
S.strip() 左右空格
S.lstrip() 
S.rstrip()

**** 大小写转换

In [8]: a= "i love you mei"

In [9]: b=a.upper()

In [10]: b
Out[10]: 'I LOVE YOU MEI'


In [11]: c=b.lower()

In [12]: c
Out[12]: 'i love you mei'

In [13]: a.capitalize()
Out[13]: 'I love you mei'



**** 5 join()

In [14]: b='www.linuxsa.org'

In [15]: c=b.split(".")

In [16]: ".".join(c)
Out[16]: 'www.linuxsa.org'

In [17]: c
Out[17]: ['www', 'linuxsa', 'org']


** 1.6 字符编码 


*** ===1.6.3===

py2 
In [1]: import sys 
In [2]: sys.getdefaultencoding()
Out[2]: 'ascii'

py3
In [1]: import sys
In [2]: sys.getdefaultencoding()
Out[2]: 'utf-8'


** ==1.7 list==
[]

In [1]: a=['1','evan','xi']

In [2]: a
Out[2]: ['1', 'evan', 'xi']

In [3]: bool(a)
Out[3]: True

*** 1.7.2 索引和切片

n [10]: a = ['2',3,'qiwsit.github.io']

In [11]: a[0]
Out[11]: '2'

In [12]: a[1]
Out[12]: 3

In [13]: a[:2]
Out[13]: ['2', 3]

In [14]: a[1:]
Out[14]: [3, 'qiwsit.github.io']

In [15]: a[1:2]
Out[15]: [3]

In [16]: a[2]
Out[16]: 'qiwsit.github.io'

In [17]: a[2][3:4]   #a[2] 中的 [3:4]
Out[17]: 's'

In [18]: a[2][7:13]
Out[18]: 'github'

-

In [19]: lang = "python"

In [20]: lang[-1]
Out[20]: 'n'

In [21]: lst = ['python','java','c++']

In [22]: lst[-1]
Out[22]: 'c++'

In [23]: lang[-1:-3]
Out[23]: ''

lang[-1:-3] ===  lang[(6-1):(6-3)] = lang[5:3]
 序列都是从左向右读取  这里却是 反过来 所以 为空 

In [23]: lang[-1:-3]
Out[23]: ''

***  ===1.7.3===
reversed 

Out[2]: ['1', 'evan', 'xi']

In [3]: bool(a)
Out[3]: True

In [4]: a[::-1]
Out[4]: ['xi', 'evan', '1']

In [5]: list(reversed(a))
Out[5]: ['xi', 'evan', '1']

*** list 操作
len(),+,in,max min etc 

修改列表元素

In [8]: a[1]
Out[8]: 'evan'

In [9]: a[1]="evanlai"

In [10]: a[1]
Out[10]: 'evanlai'

In [11]: a.append("ximei")

In [12]: a
Out[12]: ['1', 'evanlai', 'xi', 'ximei']



In [6]: len(a)
Out[6]: 3

In [7]: a+a
Out[7]: ['1', 'evan', 'xi', '1', 'evan', 'xi']


*** ==1.7.5==

hasattr() 有没有 iter 

In [1]: new = [1,2,3]

In [2]: lst = ['py','php']

In [3]: r= lst.extend(new)

In [4]: r

#没有返回值的方法，就不要使用赋值语句了 用也白用 :
In [5]: print(r)
None

In [6]: print (r)
None

要有输出 如下 
In [22]: lst.extend(new)
In [23]: lst
Out[23]: ['py', 'php', 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]


apend()  extend()


count  

In [25]: lst
Out[25]: ['py', 'php', 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
In [26]: lst.count('1')
Out[26]: 0
In [27]: lst.count(1)
Out[27]: 5

index 


insert 

In [30]: a.insert(0,'x')
In [31]: a
Out[31]: ['x', '1', 'evanlai', 'xi', 'ximei']

In [2]: a=['I','love','you']

In [3]: a
Out[3]: ['I', 'love', 'you']

In [4]: a.remove("I")

In [5]: a
Out[5]: ['love', 'you']

In [6]: a.pop()
Out[6]: 'you'

In [7]: a
Out[7]: ['love']

In [9]: a=['I','love','you','mei']

In [10]: a.reverse
Out[10]: <function list.reverse()>

In [11]: a
Out[11]: ['I', 'love', 'you', 'mei']

In [12]: a.reverse()

In [13]: a
Out[13]: ['mei', 'you', 'love', 'I']

2021年 5月10日 星期一

>>> a=[6,1,5,3]
>>> a.sort()
>>> a
[1, 3, 5, 6]
>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

*** 1.7.6 比较列表和字符串

*** 两者转化
    str.split()
>> line="hello, I love you"
>>> line.split(",")
['hello', ' I love you']

"[sep]".join(list)  是str的方法，不是list的方法 
 和上面相反 list 变str
>>> name=['us','uk']
>>> ".".join(name)
'us.uk'

>>> " ".join(name)
'us uk'


** 1.8 tuple

   

 


 
    






