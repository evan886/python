标准数据类型                                                                     
 46Python3 中有六个标准的数据类型：                                                 
 47Number（数字）                                                                   
 48String（字符串）                                                                 
 49List（列表）                                                                     
 50Tuple（元组）                                                                    
 51Sets（集合）                                                                     
 52Dictionary（字典）                                                               
 53Number（数字）                                                                   
 54Python3 支持 int、float、bool、complex（复数）。                                 
 55在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。       
http://www.runoob.com/python3/python3-data-type.html 

##copy line
Ctrl-a 光标到行首
Ctrl-Shift-Space 设置标记
Ctrl-e 光标到行尾。如此这一行就被选为激活的区域了
Alt-w 复制当前激活的区域

选中某一块区域：CTRL+@（CTRL+SHIFT+2）或者CTRL+SPACE 移动光标到合适的位置（CTRL+p、CTRL+n、CTRL+f、CTRL+b分别是向上、下、前、后 来移动光标）。
剪切快捷键：CTRL+k 删除当前位置到行末，CTRL+d相当于键盘上的DELETE键，
删除前面的字符：BACKSPACE
复制快捷键：ALT+w，将当前选中的文本复制到缓冲区。
粘贴快捷键：CTRL+y
保存快捷键：CTRL+x 然后按 CTRL+s
退出快捷键:CTRL+x 然后: CTRL+c
打开文件: CTRL+x 然后 : CTRL+f


http://www.icoolxue.com/album/show/113

 Video DownloadHelper
C:\Users\Administrator\dwhelper

== 01.走进Python==
pass
== 04 pass==
pass
== 05.pass数据类型(数字和字符串) ==
str
In [1]: a='abcde'

In [2]: a[0]
Out[2]: 'a'
拼接字符串
In [3]: a[0]+a[1]
Out[3]: 'ab'0

In [5]: a[::1]
Out[5]: 'abcde'

In [6]: a[-4:-1]
Out[6]: 'bcd'

input and raw_input (会作合法检查)

str , repr 和反引号 是将python值转换为字符串的3种方法. function str让字符串更容易阅读，而repr(和反引号)则把结果字符串转换为合法的python表达式


== 06.元组==
 pass

== 07.列表==
pass
一
[] 可作为列表，也可以是切片


Help on built-in function append:

help(list.append)
append(...)
    L.append(object) -- append object to end
(END)


== 08.字典  ==
pass

== 09.流程控制（if语句==
01:00



== 26.正则表达式(初识)==

pass 20170606



import re
#"" 有错呢 哈哈 为什么 呢
re.findall(s, 'aaaaa')
Out[5]:
[]
re.findall(s, 'aaaaabc')
Out[6]:
['abc']

st = "top ip tep "
res = r"top"
re.findall(res, st)
Out[10]:
['top']

#使用元字符
st = "top tip io "
res= r"t[io]p"

re.findall(res,st)
Out[9]:
['top', 'tip']

反
res= r"t[^io]p"
re.findall(res,st)
Out[11]:
[]


In [1]: s = "hello world, hello boy"
In [2]: r = r"hello"

In [4]: re.findall(r,s)
Out[4]: ['hello', 'hello']

In [5]: r = r"^hello"

In [6]: re.findall(r,s)
Out[6]: ['hello']

In [7]: s = "world,hello boy"
In [8]: re.findall(r,s)
Out[8]: []


***
In [10]: s = "world,hello boy"

In [11]: r=r"boy$"

In [12]: re.findall(r,s)
Out[12]: ['boy']

****

[] 中  $不起效果

In [13]: r = "t[abc$]"

In [14]: re.findall(r,'ta')
Out[14]: ['ta']

In [15]: re.findall(r,'tb')
Out[15]: ['tb']

In [16]: re.findall(r,'tax')
Out[16]: ['ta']

***
In [17]: re.findall(r,'t$')
Out[17]: ['t$']

In [18]: r = "t[abc^]"

In [19]: re.findall(r,'t^')
Out[19]: ['t^']

***
In [20]: r=r"x[0123456789]x"

In [21]: re.findall(r,'x1x')
Out[21]: ['x1x']

In [22]: re.findall(r,'x1x x2x')
Out[22]: ['x1x', 'x2x']

**  优化
In [23]: r = r"x[0-9]x"

In [24]: re.findall(r,'x1x x2x')
Out[24]: ['x1x', 'x2x']




==27 正则表达式（元字符） ==


配置电话号码
In [7]: import re

In [8]: r=r"^010-\d\d\d\d\d\d\d\d"

In [9]: re.findall(r,'010-87654321')
Out[9]: ['010-87654321']

In [10]: re.findall(r,'010-8765432')
Out[10]: []

升级
In [11]: r=r"^010-\d{8}"

In [12]: re.findall(r,'010-8765432')
Out[12]: []

In [13]: re.findall(r,'010-87654323')
Out[13]: ['010-87654323']

一个-或者没有-
r=r"^010-?\d{8}$"
非贪婪模式 一般加?


== 28.正则表达式（常用函数）==



import re
r1=r"\d{3,4}-?\d{8}"
In [4]: re.findall(r1,"010-12345678")
Out[4]: ['010-12345678']

In [5]: re.findall(r1,"010-1234567")
Out[5]: []

In [6]: p_tel=re.compile(r1)

In [7]: p_tel
Out[7]: re.compile(r'\d{3,4}-?\d{8}')

In [8]: p_tel.findall('010-223088198')
Out[8]: ['010-22308819']

In [9]: p_tel.findall('0101-223088198')
Out[9]: ['0101-22308819']

不区分大小写
In [11]: csvt_re = re.compile(r'csvt',re.I)

In [12]: csvt_re.findall('CSVT')
Out[12]: ['CSVT']

In [13]: csvt_re.findall('CSvt')
Out[13]: ['CSvt']

In [14]: csvt_re.match('csvt hello')
Out[14]: <_sre.SRE_Match at 0x7fcaf94c3510>

In [15]: csvt_re.match('hello')

In [16]: csvt_re.match('hello csvt')

In [17]: csvt_re.match('csvt')
Out[17]: <_sre.SRE_Match at 0x7fcaf94c3780>

In [18]: x = csvt_re.match('csvt')

In [19]: if x :
    ...:     pass
    ...:


In [20]: csvt_re.search('hello csvt')
Out[20]: <_sre.SRE_Match at 0x7fcaf94c39f0>

In [21]: csvt_re.search('csvt hello')
Out[21]: <_sre.SRE_Match at 0x7fcaf94c3e68>


    
help(re.sub)

In [22]: s = "hello csvt"

In [24]: s.replace('csvt', 'python')
Out[24]: 'hello python'

更加好用的办法

In [30]: import re

In [31]: rs=r'c..t'

In [32]: re.sub(rs,'python','csvt caat cvvt cccc')
Out[32]: 'python python python cccc'

In [33]: re.subn(rs,'python','csvt caat cvvt cccc')
Out[33]: ('python python python cccc', 3)




In [34]: ip = "1.2.3.4"

In [35]: ip.split('.')
Out[35]: ['1', '2', '3', '4']

In [36]: s = "123+456-789*000"

In [37]: re.split(r'[\+\-\*]',s)
Out[37]: ['123', '456', '789', '000']


dir(re)
help(re.split)

==29.正则表达式（re属性分组）.mp4==

、Python正则表达式指南
http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html

使用 Python 模块 re 实现解析小工具
https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonre/index.html

整理】详解Python中re.sub
https://www.crifan.com/python_re_sub_detailed_introduction/
