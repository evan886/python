标准数据类型                                                                     
 46Python3 中有六个标准的数据类型：                                                 
 47Number（数字）                                                                   
 48String（字符串）                                                                 
 49List（列表）                                                                     
 50Tuple（元组）                                                                    
 51Sets（集合）                                                                     
 52Dictionary（字典）                                                               
 53Number（数字）                                                                   
 54Python3 支持 int、float、bool、complex（复数）。                                 
 55在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。       
http://www.runoob.com/python3/python3-data-type.html 

##copy line
Ctrl-a 光标到行首
Ctrl-Shift-Space 设置标记
Ctrl-e 光标到行尾。如此这一行就被选为激活的区域了
Alt-w 复制当前激活的区域

选中某一块区域：CTRL+@（CTRL+SHIFT+2）或者CTRL+SPACE 移动光标到合适的位置（CTRL+p、CTRL+n、CTRL+f、CTRL+b分别是向上、下、前、后 来移动光标）。
剪切快捷键：CTRL+k 删除当前位置到行末，CTRL+d相当于键盘上的DELETE键，
删除前面的字符：BACKSPACE
复制快捷键：ALT+w，将当前选中的文本复制到缓冲区。
粘贴快捷键：CTRL+y
保存快捷键：CTRL+x 然后按 CTRL+s
退出快捷键:CTRL+x 然后: CTRL+c
打开文件: CTRL+x 然后 : CTRL+f


http://www.icoolxue.com/album/show/113

 Video DownloadHelper
C:\Users\Administrator\dwhelper

== 01.走进Python==
pass
== 04 pass==
pass
== 05.pass数据类型(数字和字符串) ==
str
In [1]: a='abcde'

In [2]: a[0]
Out[2]: 'a'
拼接字符串
In [3]: a[0]+a[1]
Out[3]: 'ab'0

In [5]: a[::1]
Out[5]: 'abcde'

In [6]: a[-4:-1]
Out[6]: 'bcd'

input and raw_input (会作合法检查)

str , repr 和反引号 是将python值转换为字符串的3种方法. function str让字符串更容易阅读，而repr(和反引号)则把结果字符串转换为合法的python表达式


== 06.元组==
 pass

== 07.列表==
pass
一
[] 可作为列表，也可以是切片


Help on built-in function append:

help(list.append)
append(...)
    L.append(object) -- append object to end
(END)


== 08.字典  ==
pass

== 09.流程控制（if语句==
pass
if 1<2:
    print  "ok"

if  else 之间不能用其实内容 空行可以
== 10.流程控制(逻辑) ==
pass 
In [3]: True  and True 
Out[3]: True

In [4]: True  and False 
Out[4]: False

In [5]: 1 and 1 and 1
Out[5]: 1


== 11流程控制（for语句）  ==
pass
range  xrange 

In [17]: num = 0
In [18]: for  x in range(1,101):
    ...:     num += x 
    ...:     
In [19]: print num 
5050

== 12.流程控制(遍历序列及字典) ==
pass

遍历字典

evan@evankali:~/github/python/test$ cat 2.py
#!/usr/bin/python
s = "hello"
l = [1,2,3,'a','b']
t = (7,8,9,'x','y')
d = {1:111,2:222,5:555,3:333}
for x in l:
    if x >=2:
            print x


for x in range(len(s)):
    print s[x]
    evan@evankali:~/github/python/test$ cat di.py
    #!/usr/bin/python
    s = "hello"
    l = [1,2,3,'a','b']
    t = (7,8,9,'x','y')
    d = {1:111,2:222,5:555,3:333}


for x in d:
    print d[x]
    
evan@evankali:~/github/python/test$ cat  di.py
#!/usr/bin/python
s = "hello"
l = [1,2,3,'a','b']
t = (7,8,9,'x','y')
d = {1:111,2:222,5:555,3:333}


#for x in d:
#    print d[x]

for k,v in d.items():
    print k
        print v
	evan@evankali:~/github/python/test$ python   di.py
	1
	111
	2
	222
	3
	333
	5
	555


== 13.流程控制（循环控制） ==
pass
evan@evankali:~/github/python/test$ cat di.py
#!/usr/bin/python
s = "hello"
l = [1,2,3,'a','b']
t = (7,8,9,'x','y')
d = {1:111,2:222,5:555,3:333}


for x in d:
    print d[x]
    else:
        print "1ending"

for k,v in d.items():
    print k
        print v
	else:
	    print "en"
	    evan@evankali:~/github/python/test$ python di.py
	    111
	    222
	    333
	    555
	    1ending
	    1
	    111
	    2
	    222
	    3
	    333
	    5
	    555
	    en
	    

#!/usr/bin/python
import time 
s = "hello"
l = [1,2,3,'a','b']
t = (7,8,9,'x','y')
d = {1:111,2:222,5:555,3:333}


for x in range(3):
    print x
    time.sleep(1)
else:
    print "1ending"

evan@evanpc:~/github/python/test$ python 13.py 
0
1
2
1ending

evan@evanpc:~/github/python/test$ cat  13.py 
#!/usr/bin/python
import time 

for x in range(1,11):
    print x
    if x == 6:
        break
else:
    print "1ending"

evan@evanpc:~/github/python/test$ python 13.py 
1
2
3
4
5
6

==14.流程控制（while循环） ==
06:00

evan@evankali:~/github/python/test$ python   while14.py
hey
ple input somethin, q for quit:q
hey
ple input somethin, q for quit:^CTraceback (most recent call last):
  File "while14.py", line 5, in <module>
      x =raw_input("ple input somethin, q for quit:")
      KeyboardInterrupt
      evan@evankali:~/github/python/test$ cat while14.py
      #!/usr/bin/python

while  True:
    print "hey"
        x =raw_input("ple input somethin, q for quit:") 
evan@evankali:~/github/python/test$ python   while14.py
hey
ple input somethin, q for quit:q
evan@evankali:~/github/python/test$ cat    while14.py
#!/usr/bin/python

while  True:
    print "hey"
    x =raw_input("ple input somethin, q for quit:")
    if x == "q":
         break
  
evan@evankali:~/github/python/test$ cat  while14_1.py 
#!/usr/bin/python
x= ""
while  True:
    print "hey"
    x =raw_input("ple input somethin, q for quit:")
    if x == "q":
        break
evan@evankali:~/github/python/test$ python while14_1.py 
hey
ple input somethin, q for quit:a
hey
ple input somethin, q for quit:q

#改良  回车自动退出
evan@evankali:~/github/python/test$ cat   while14_1.py 
#!/usr/bin/python
x= ""
while  x != "q":
    print "hey"
    x =raw_input("ple input somethin, q for quit:")
    if not x :
        break
evan@evankali:~/github/python/test$ python    while14_1.py 
hey
ple input somethin, q for quit:a
hey
ple input somethin, q for quit:

#!/usr/bin/python
x= ""
while  x != "q":
    print "hey"
    x =raw_input("ple input somethin, q for quit:")
    if not x :
        break
    
else:
    print "enddo"

$ python  while14_1.py
hey
ple input somethin, q for quit:hey
hey
ple input somethin, q for quit:q
enddo

 emacs while14_1.py
evan@evankali:~/github/python/test$ 
evan@evankali:~/github/python/test$ cat  while14_1.py
#!/usr/bin/python
x= ""
while  x != "q":
    print "hey"
    x =raw_input("ple input somethin, q for quit:")
    if not x :
        break
    if x == "c":
        continue
    print "one more time"
    
else:
    print "enddo"
        

        
evan@evankali:~/github/python/test$ python  while14_1.py
hey
ple input somethin, q for quit:love
one more time
hey
ple input somethin, q for quit:c
hey
ple input somethin, q for quit:


==  15.函数(定义和调用) ==
pass

In [1]: def add():
   ...:     c = a+b
   ...:     print c
   ...:  

In [3]: a = 100

In [4]: b = 200

In [5]: add()
300


#!/usr/bin/python
a = 100
def fun():
    if True:
            print  "good"

print a
fun()

== 16.函数(形参实参默认参数)==

****
evan@evankali:~/github/python/test/16$ python 1.py 
input some:x
x
evan@evankali:~/github/python/test/16$ cat  1.py
def fun(x):
#    if True:
     print  x


s=raw_input("input some:")
fun(s)  
*****
evan@evanpc:~/github/python/test/16$ cat  1.py
def fun(x,y):
    if x == y :
        print  x,'=' , y
    else:
        print  x,'!=' , 



s1 = raw_input("input some:")
s2 = raw_input("input some:")
fun(s1,s2)        
evan@evanpc:~/github/python/test/16$ python 1.py 
input some:hey 
input some:hey 
hey  = hey 
evan@evanpc:~/github/python/test/16$ python 1.py 
input some:hey 
input some:he
hey  !=

******************

evan@evanpc:~/github/python/test/16$ cat 2.py
#!/usr/bin/python
#coding:utf8
def mashine(x=3,y='奶油'):
    print "生成一个",x,'元',y,'口味的冰'

#mashine(5,'巧克力')    
mashine(5,)
#mashine(x=5)
evan@evanpc:~/github/python/test/16$ python 2.py 
生成一个 5 元 奶油 口味的冰
***
设置默认参考是自右向左
def mashine(x=3,y):
不行 

而
def mashine(x,y=3):
可以 
总结 就是右边的是一定有值的

==17.函数（变量作用域）==

evan@evanpc:~/github/python/test/17$ cat  fu.py
#!/usr/bin/python
x = 'I am global  var'

def fun():
    x = 100
    global y
    y = 200
    print x

fun()
print x

print y
evan@evanpc:~/github/python/test/17$ python fu.py 
100
I am global  var
200

evan@evanpc:~/github/python/test/17$ cat  fu.py
#!/usr/bin/python
x = 'I am global  var'

def fun():
    x = 100
    global y
    y = 200
    print x


print y
# fun 没有运行 所以报错
evan@evanpc:~/github/python/test/17$ python fu.py 
Traceback (most recent call last):
  File "fu.py", line 11, in <module>
    print y
NameError: global name 'y' is not defined

evan@evanpc:~/github/python/test/17$ cat  fu.py
#!/usr/bin/python
x = 'I am global  var'

def fun():

    global y
    y = 200
    
    global x
    x = 100

fun()    
print x
evan@evanpc:~/github/python/test/17$ python fu.py 
100

== 18.函数及return返回值==
11:00

In [1]: def f(x,y):
   ...:     print "welcome"
   ...:     return x+y
   ...: 

In [2]: f(2,3)
welcome
Out[2]: 5

but  正常情况其实

def f(x,y):
    print "welcome"
    return x+y

f(2,3)
evan@evanpc:~/github/python/test/17$ python f.py 
welcome

return 执行后 function 就结束了 
In [1]: def f():
   ...:     return "one"
   ...:     return "two"
   ...: 

In [2]: f()
Out[2]: 'one'


evan@evanpc:~/github/python/test/17$ cat x.py
def f(x,y):
    if x>y:
        return 1
    if x <y:
        return -1
    return 0
print f(1,2)
evan@evanpc:~/github/python/test/17$ python x.py 
-1

== 19.函数冗余参数==
元组 字典什么 的可以作实参


多用return 少用print  除非你是想要打印出来

In [1]: def f(x,y):
   ...:     print x,y
   ...:     

In [2]: f(1,2)
1 2

In [3]: t=('a','b')

In [4]: f(t)
-----------------------------------------------------------------
TypeError      

In [5]: type(t)
Out[5]: tuple


In [6]: f(t,'te')
('a', 'b') te

In [9]: print "%s : %s" %('name','milo')
name : milo


In [8]: def f(x,y):
   ...:     print "%s : %s" % x,y
   ...:  


In [1]: def f(x,y):
   ...:     print "%s : %s" % x ,y
   ...:     

In [2]: t=('name','milo')

In [3]: f(t)
---------------------------------------------------------------------------
TypeError     

正确
In [5]: def f(x,y):
   ...:     print "%s : %s" % (x,y)
   ...:     

In [6]: f(*t)
name : milo

怪死
In [9]: def f(name="name", age=0):
   ...:     print "name: %s"  %s name 
  File "<ipython-input-9-781b124a7d57>", line 2
    print "name: %s"  %s name
                            ^
SyntaxError: invalid syntax


In [10]: def f(name="name", age=0):
    ...:     print "name: %s" % name
    ...:     print "age: %s" % age 
    ...:  

In [11]: f("evan",30)
name: evan
age: 30

In [12]: f()
name: name
age: 0

In [13]: t=(30,'evan')

In [14]: f(*t)
name: 30
age: evan

In [15]: d = {'age':30, 'name':'evan'}

In [16]: f(name="evan",age=30)
name: evan
age: 30

In [17]: f(age=30,name="evan")
name: evan
age: 30



In [1]:  d = {'age':30, 'name':'evan'}

In [2]: def f(name="name", age=0):
   ...:     print "name: %s" % name
   ...:     print "age: %s" % age
   ...:     

In [3]: f(**d)
name: evan
age: 30

In [4]: d['age']=31

In [5]: d 
Out[5]: {'age': 31, 'name': 'evan'}

In [6]: f(**d)
name: evan
age: 31

In [7]: d={'a':30, 'n':'evan'}

In [8]: f(**d)
---------------------------------------------------------------------------
TypeError 

In [9]: f(d['n'],d['a'])
name: evan
age: 30


In [10]: def f(x,*args):
    ...:     print x
    ...:     print args
    ...:     

In [11]: f(1)
1
()

In [12]: f(1,2,3)
1
(2, 3)

In [13]: f(1,2,3,4,5,6)
1
(2, 3, 4, 5, 6)

In [14]: f(x=4)
4
()

In [15]: f(x=4,y=40)
---------------------------------------------------------------------------
TypeError  

可以随意传输参数了:
In [16]: def f(x,*args,**kwargs):
    ...:     print x 
    ...:     print args 
    ...:     print kwargs
    ...:     

In [17]: f(1)
1
()
{}

n [18]: f(1,2,3,5)
1
(2, 3, 5)
{}

In [19]: f(x=1,y=2)
1
()
{'y': 2}

In [20]: f(1,3,4,x=1,y=2,z=20)
In [20]: f(1,3,4,x=1,y=2,z=20)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-20-0beb330e738b> in <module>()
----> 1 f(1,3,4,x=1,y=2,z=20)

TypeError: f() got multiple values for keyword argument 'x'

In [23]: f(1,3,4,z=1,y=2)
1
(3, 4)
{'y': 2, 'z': 1}



==20.函数lambda匿名函数==

In [1]: def f(x,y):
   ...:     return x*y
   ...: 

In [2]: g=lambda x,y:x*y

In [3]: g(2,3)
Out[3]: 6

In [4]: print g
<function <lambda> at 0x7fc9c0b54e60>


reduce 

In [5]: def f(n):
   ...:     if n > 0 :
   ...:         n*f(n-1)
   ...:         

In [6]: l = range(1,6)

In [7]: l
Out[7]: [1, 2, 3, 4, 5]

In [13]: def f(x,y):
    ...:     return x*y
    ...: 

reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：


reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00141861202544241651579c69d4399a9aa135afef28c44000


 把function 作用于list 

n [14]: reduce(f,l)
Out[14]: 120


In [15]: f=lambda x,y:x*y

In [16]: reduce(f,l)
Out[16]: 120






Can’t guess python-indent-offset, using defaults: 4


链接：http://pan.baidu.com/s/1i4JidfB 密码：6tum
== 26.正则表达式(初识)==

pass 20170606



import re
#"" 有错呢 哈哈 为什么 呢
re.findall(s, 'aaaaa')
Out[5]:
[]
re.findall(s, 'aaaaabc')
Out[6]:
['abc']

st = "top ip tep "
res = r"top"
re.findall(res, st)
Out[10]:
['top']

#使用元字符
st = "top tip io "
res= r"t[io]p"

re.findall(res,st)
Out[9]:
['top', 'tip']

反
res= r"t[^io]p"
re.findall(res,st)
Out[11]:
[]


In [1]: s = "hello world, hello boy"
In [2]: r = r"hello"

In [4]: re.findall(r,s)
Out[4]: ['hello', 'hello']

In [5]: r = r"^hello"

In [6]: re.findall(r,s)
Out[6]: ['hello']

In [7]: s = "world,hello boy"
In [8]: re.findall(r,s)
Out[8]: []


***
In [10]: s = "world,hello boy"

In [11]: r=r"boy$"

In [12]: re.findall(r,s)
Out[12]: ['boy']

****

[] 中  $不起效果

In [13]: r = "t[abc$]"

In [14]: re.findall(r,'ta')
Out[14]: ['ta']

In [15]: re.findall(r,'tb')
Out[15]: ['tb']

In [16]: re.findall(r,'tax')
Out[16]: ['ta']

***
In [17]: re.findall(r,'t$')
Out[17]: ['t$']

In [18]: r = "t[abc^]"

In [19]: re.findall(r,'t^')
Out[19]: ['t^']

***
In [20]: r=r"x[0123456789]x"

In [21]: re.findall(r,'x1x')
Out[21]: ['x1x']

In [22]: re.findall(r,'x1x x2x')
Out[22]: ['x1x', 'x2x']

**  优化
In [23]: r = r"x[0-9]x"

In [24]: re.findall(r,'x1x x2x')
Out[24]: ['x1x', 'x2x']




==27 正则表达式（元字符） ==


配置电话号码
In [7]: import re

In [8]: r=r"^010-\d\d\d\d\d\d\d\d"

In [9]: re.findall(r,'010-87654321')
Out[9]: ['010-87654321']

In [10]: re.findall(r,'010-8765432')
Out[10]: []

升级
In [11]: r=r"^010-\d{8}"

In [12]: re.findall(r,'010-8765432')
Out[12]: []

In [13]: re.findall(r,'010-87654323')
Out[13]: ['010-87654323']

一个-或者没有-
r=r"^010-?\d{8}$"
非贪婪模式 一般加?


== 28.正则表达式（常用函数）==



import re
r1=r"\d{3,4}-?\d{8}"
In [4]: re.findall(r1,"010-12345678")
Out[4]: ['010-12345678']

In [5]: re.findall(r1,"010-1234567")
Out[5]: []

In [6]: p_tel=re.compile(r1)

In [7]: p_tel
Out[7]: re.compile(r'\d{3,4}-?\d{8}')

In [8]: p_tel.findall('010-223088198')
Out[8]: ['010-22308819']

In [9]: p_tel.findall('0101-223088198')
Out[9]: ['0101-22308819']

不区分大小写
In [11]: csvt_re = re.compile(r'csvt',re.I)

In [12]: csvt_re.findall('CSVT')
Out[12]: ['CSVT']

In [13]: csvt_re.findall('CSvt')
Out[13]: ['CSvt']

In [14]: csvt_re.match('csvt hello')
Out[14]: <_sre.SRE_Match at 0x7fcaf94c3510>

In [15]: csvt_re.match('hello')

In [16]: csvt_re.match('hello csvt')

In [17]: csvt_re.match('csvt')
Out[17]: <_sre.SRE_Match at 0x7fcaf94c3780>

In [18]: x = csvt_re.match('csvt')

In [19]: if x :
    ...:     pass
    ...:


In [20]: csvt_re.search('hello csvt')
Out[20]: <_sre.SRE_Match at 0x7fcaf94c39f0>

In [21]: csvt_re.search('csvt hello')
Out[21]: <_sre.SRE_Match at 0x7fcaf94c3e68>


    
help(re.sub)

In [22]: s = "hello csvt"

In [24]: s.replace('csvt', 'python')
Out[24]: 'hello python'

更加好用的办法

In [30]: import re

In [31]: rs=r'c..t'

In [32]: re.sub(rs,'python','csvt caat cvvt cccc')
Out[32]: 'python python python cccc'

In [33]: re.subn(rs,'python','csvt caat cvvt cccc')
Out[33]: ('python python python cccc', 3)




In [34]: ip = "1.2.3.4"

In [35]: ip.split('.')
Out[35]: ['1', '2', '3', '4']

In [36]: s = "123+456-789*000"

In [37]: re.split(r'[\+\-\*]',s)
Out[37]: ['123', '456', '789', '000']


dir(re)
help(re.split)

==29.正则表达式（re属性分组）==

. 除 \n 外的任意一个字符


In [2]: r1=r"csvt.net"

In [3]: re.findall(r1,'csvt.net')
Out[3]: ['csvt.net']

In [4]: re.findall(r1,'csvtnet')
Out[4]: []

In [5]: re.findall(r1,'csvtonet')
Out[5]: ['csvtonet']


电话号码也 
In [3]: tel = r"""
   ...: \d{3,4}
   ...: -?
   ...: \d{8}
   ...: """

In [4]: re.findall(tel,'010-12345678')
Out[4]: []

In [5]: tel
Out[5]: '\n\\d{3,4}\n-?\n\\d{8}\n'

In [6]: re.findall(tel,'010-12345678',re.X)
Out[6]: ['010-12345678']



re 属性分组
3个字母   \w+ 一个以上字母

In [9]: email=r"\w{3}@\w+(\.com|\.cn)"

In [10]: re.match(email,'zzz@csvt.com')
    ...:
    ...:
Out[10]: <_sre.SRE_Match at 0x7efdb105ddc8>

分组会 把相关的内容作为一个整体
其实匹配整个email 地址
有分组 findall 会优先返回分组中的数据
In [11]: re.findall(email,'zzz@csvt.com')
    ...:
    ...:
Out[11]: ['.com']


分组好例子

In [13]: s = """  
    ...: hhsdj dskj hello src=csvt yes jdjsds
    ...: djhsjk src=123 yes jdsa
    ...: src=234 yes 
    ...: hello  src=python yes ksa """

In [14]: print s

hhsdj dskj hello src=csvt yes jdjsds
djhsjk src=123 yes jdsa
src=234 yes
hello  src=python yes ksa


只要 =后面的东西 所以用分组 得到

In [16]: r1=r"hello src=.+ yes"
In [16]: r1=r"hello src=.+ yes"

In [17]: re.findall(r1,s)
Out[17]: ['hello src=csvt yes']

In [18]: r1=r"hello src=(.+) yes"

In [19]: re.findall(r1,s)
Out[19]: ['csvt']

==30.爬虫==

完 但最好能不看着别人代码写出来




、Python正则表达式指南
http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html
v
使用 Python 模块 re 实现解析小工具
https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonre/index.html

整理】详解Python中re.sub
https://www.crifan.com/python_re_sub_detailed_introduction/
